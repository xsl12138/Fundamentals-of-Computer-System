
bomb:     file format elf32-i386


Disassembly of section .init:

080486f4 <_init>:
 80486f4:	53                   	push   %ebx
 80486f5:	83 ec 08             	sub    $0x8,%esp
 80486f8:	e8 13 02 00 00       	call   8048910 <__x86.get_pc_thunk.bx>
 80486fd:	81 c3 03 39 00 00    	add    $0x3903,%ebx
 8048703:	8b 83 fc ff ff ff    	mov    -0x4(%ebx),%eax
 8048709:	85 c0                	test   %eax,%eax
 804870b:	74 05                	je     8048712 <_init+0x1e>
 804870d:	e8 be 01 00 00       	call   80488d0 <__gmon_start__@plt>
 8048712:	83 c4 08             	add    $0x8,%esp
 8048715:	5b                   	pop    %ebx
 8048716:	c3                   	ret    

Disassembly of section .plt:

08048720 <.plt>:
 8048720:	ff 35 04 c0 04 08    	pushl  0x804c004
 8048726:	ff 25 08 c0 04 08    	jmp    *0x804c008
 804872c:	00 00                	add    %al,(%eax)
	...

08048730 <read@plt>:
 8048730:	ff 25 0c c0 04 08    	jmp    *0x804c00c
 8048736:	68 00 00 00 00       	push   $0x0
 804873b:	e9 e0 ff ff ff       	jmp    8048720 <.plt>

08048740 <fflush@plt>:
 8048740:	ff 25 10 c0 04 08    	jmp    *0x804c010
 8048746:	68 08 00 00 00       	push   $0x8
 804874b:	e9 d0 ff ff ff       	jmp    8048720 <.plt>

08048750 <fgets@plt>:
 8048750:	ff 25 14 c0 04 08    	jmp    *0x804c014
 8048756:	68 10 00 00 00       	push   $0x10
 804875b:	e9 c0 ff ff ff       	jmp    8048720 <.plt>

08048760 <signal@plt>:
 8048760:	ff 25 18 c0 04 08    	jmp    *0x804c018
 8048766:	68 18 00 00 00       	push   $0x18
 804876b:	e9 b0 ff ff ff       	jmp    8048720 <.plt>

08048770 <sleep@plt>:
 8048770:	ff 25 1c c0 04 08    	jmp    *0x804c01c
 8048776:	68 20 00 00 00       	push   $0x20
 804877b:	e9 a0 ff ff ff       	jmp    8048720 <.plt>

08048780 <alarm@plt>:
 8048780:	ff 25 20 c0 04 08    	jmp    *0x804c020
 8048786:	68 28 00 00 00       	push   $0x28
 804878b:	e9 90 ff ff ff       	jmp    8048720 <.plt>

08048790 <__stack_chk_fail@plt>:
 8048790:	ff 25 24 c0 04 08    	jmp    *0x804c024
 8048796:	68 30 00 00 00       	push   $0x30
 804879b:	e9 80 ff ff ff       	jmp    8048720 <.plt>

080487a0 <strcpy@plt>:
 80487a0:	ff 25 28 c0 04 08    	jmp    *0x804c028
 80487a6:	68 38 00 00 00       	push   $0x38
 80487ab:	e9 70 ff ff ff       	jmp    8048720 <.plt>

080487b0 <getenv@plt>:
 80487b0:	ff 25 2c c0 04 08    	jmp    *0x804c02c
 80487b6:	68 40 00 00 00       	push   $0x40
 80487bb:	e9 60 ff ff ff       	jmp    8048720 <.plt>

080487c0 <puts@plt>:
 80487c0:	ff 25 30 c0 04 08    	jmp    *0x804c030
 80487c6:	68 48 00 00 00       	push   $0x48
 80487cb:	e9 50 ff ff ff       	jmp    8048720 <.plt>

080487d0 <__memmove_chk@plt>:
 80487d0:	ff 25 34 c0 04 08    	jmp    *0x804c034
 80487d6:	68 50 00 00 00       	push   $0x50
 80487db:	e9 40 ff ff ff       	jmp    8048720 <.plt>

080487e0 <exit@plt>:
 80487e0:	ff 25 38 c0 04 08    	jmp    *0x804c038
 80487e6:	68 58 00 00 00       	push   $0x58
 80487eb:	e9 30 ff ff ff       	jmp    8048720 <.plt>

080487f0 <__libc_start_main@plt>:
 80487f0:	ff 25 3c c0 04 08    	jmp    *0x804c03c
 80487f6:	68 60 00 00 00       	push   $0x60
 80487fb:	e9 20 ff ff ff       	jmp    8048720 <.plt>

08048800 <write@plt>:
 8048800:	ff 25 40 c0 04 08    	jmp    *0x804c040
 8048806:	68 68 00 00 00       	push   $0x68
 804880b:	e9 10 ff ff ff       	jmp    8048720 <.plt>

08048810 <__isoc99_sscanf@plt>:
 8048810:	ff 25 44 c0 04 08    	jmp    *0x804c044
 8048816:	68 70 00 00 00       	push   $0x70
 804881b:	e9 00 ff ff ff       	jmp    8048720 <.plt>

08048820 <fopen@plt>:
 8048820:	ff 25 48 c0 04 08    	jmp    *0x804c048
 8048826:	68 78 00 00 00       	push   $0x78
 804882b:	e9 f0 fe ff ff       	jmp    8048720 <.plt>

08048830 <__errno_location@plt>:
 8048830:	ff 25 4c c0 04 08    	jmp    *0x804c04c
 8048836:	68 80 00 00 00       	push   $0x80
 804883b:	e9 e0 fe ff ff       	jmp    8048720 <.plt>

08048840 <__printf_chk@plt>:
 8048840:	ff 25 50 c0 04 08    	jmp    *0x804c050
 8048846:	68 88 00 00 00       	push   $0x88
 804884b:	e9 d0 fe ff ff       	jmp    8048720 <.plt>

08048850 <socket@plt>:
 8048850:	ff 25 54 c0 04 08    	jmp    *0x804c054
 8048856:	68 90 00 00 00       	push   $0x90
 804885b:	e9 c0 fe ff ff       	jmp    8048720 <.plt>

08048860 <__fprintf_chk@plt>:
 8048860:	ff 25 58 c0 04 08    	jmp    *0x804c058
 8048866:	68 98 00 00 00       	push   $0x98
 804886b:	e9 b0 fe ff ff       	jmp    8048720 <.plt>

08048870 <gethostbyname@plt>:
 8048870:	ff 25 5c c0 04 08    	jmp    *0x804c05c
 8048876:	68 a0 00 00 00       	push   $0xa0
 804887b:	e9 a0 fe ff ff       	jmp    8048720 <.plt>

08048880 <strtol@plt>:
 8048880:	ff 25 60 c0 04 08    	jmp    *0x804c060
 8048886:	68 a8 00 00 00       	push   $0xa8
 804888b:	e9 90 fe ff ff       	jmp    8048720 <.plt>

08048890 <connect@plt>:
 8048890:	ff 25 64 c0 04 08    	jmp    *0x804c064
 8048896:	68 b0 00 00 00       	push   $0xb0
 804889b:	e9 80 fe ff ff       	jmp    8048720 <.plt>

080488a0 <close@plt>:
 80488a0:	ff 25 68 c0 04 08    	jmp    *0x804c068
 80488a6:	68 b8 00 00 00       	push   $0xb8
 80488ab:	e9 70 fe ff ff       	jmp    8048720 <.plt>

080488b0 <__ctype_b_loc@plt>:
 80488b0:	ff 25 6c c0 04 08    	jmp    *0x804c06c
 80488b6:	68 c0 00 00 00       	push   $0xc0
 80488bb:	e9 60 fe ff ff       	jmp    8048720 <.plt>

080488c0 <__sprintf_chk@plt>:
 80488c0:	ff 25 70 c0 04 08    	jmp    *0x804c070
 80488c6:	68 c8 00 00 00       	push   $0xc8
 80488cb:	e9 50 fe ff ff       	jmp    8048720 <.plt>

Disassembly of section .plt.got:

080488d0 <__gmon_start__@plt>:
 80488d0:	ff 25 fc bf 04 08    	jmp    *0x804bffc
 80488d6:	66 90                	xchg   %ax,%ax

Disassembly of section .text:

080488e0 <_start>:
 80488e0:	31 ed                	xor    %ebp,%ebp
 80488e2:	5e                   	pop    %esi
 80488e3:	89 e1                	mov    %esp,%ecx
 80488e5:	83 e4 f0             	and    $0xfffffff0,%esp
 80488e8:	50                   	push   %eax
 80488e9:	54                   	push   %esp
 80488ea:	52                   	push   %edx
 80488eb:	68 30 9f 04 08       	push   $0x8049f30
 80488f0:	68 d0 9e 04 08       	push   $0x8049ed0
 80488f5:	51                   	push   %ecx
 80488f6:	56                   	push   %esi
 80488f7:	68 db 89 04 08       	push   $0x80489db
 80488fc:	e8 ef fe ff ff       	call   80487f0 <__libc_start_main@plt>
 8048901:	f4                   	hlt    
 8048902:	66 90                	xchg   %ax,%ax
 8048904:	66 90                	xchg   %ax,%ax
 8048906:	66 90                	xchg   %ax,%ax
 8048908:	66 90                	xchg   %ax,%ax
 804890a:	66 90                	xchg   %ax,%ax
 804890c:	66 90                	xchg   %ax,%ax
 804890e:	66 90                	xchg   %ax,%ax

08048910 <__x86.get_pc_thunk.bx>:
 8048910:	8b 1c 24             	mov    (%esp),%ebx
 8048913:	c3                   	ret    
 8048914:	66 90                	xchg   %ax,%ax
 8048916:	66 90                	xchg   %ax,%ax
 8048918:	66 90                	xchg   %ax,%ax
 804891a:	66 90                	xchg   %ax,%ax
 804891c:	66 90                	xchg   %ax,%ax
 804891e:	66 90                	xchg   %ax,%ax

08048920 <deregister_tm_clones>:
 8048920:	b8 a3 c3 04 08       	mov    $0x804c3a3,%eax
 8048925:	2d a0 c3 04 08       	sub    $0x804c3a0,%eax
 804892a:	83 f8 06             	cmp    $0x6,%eax
 804892d:	76 1a                	jbe    8048949 <deregister_tm_clones+0x29>
 804892f:	b8 00 00 00 00       	mov    $0x0,%eax
 8048934:	85 c0                	test   %eax,%eax
 8048936:	74 11                	je     8048949 <deregister_tm_clones+0x29>
 8048938:	55                   	push   %ebp
 8048939:	89 e5                	mov    %esp,%ebp
 804893b:	83 ec 14             	sub    $0x14,%esp
 804893e:	68 a0 c3 04 08       	push   $0x804c3a0
 8048943:	ff d0                	call   *%eax
 8048945:	83 c4 10             	add    $0x10,%esp
 8048948:	c9                   	leave  
 8048949:	f3 c3                	repz ret 
 804894b:	90                   	nop
 804894c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

08048950 <register_tm_clones>:
 8048950:	b8 a0 c3 04 08       	mov    $0x804c3a0,%eax
 8048955:	2d a0 c3 04 08       	sub    $0x804c3a0,%eax
 804895a:	c1 f8 02             	sar    $0x2,%eax
 804895d:	89 c2                	mov    %eax,%edx
 804895f:	c1 ea 1f             	shr    $0x1f,%edx
 8048962:	01 d0                	add    %edx,%eax
 8048964:	d1 f8                	sar    %eax
 8048966:	74 1b                	je     8048983 <register_tm_clones+0x33>
 8048968:	ba 00 00 00 00       	mov    $0x0,%edx
 804896d:	85 d2                	test   %edx,%edx
 804896f:	74 12                	je     8048983 <register_tm_clones+0x33>
 8048971:	55                   	push   %ebp
 8048972:	89 e5                	mov    %esp,%ebp
 8048974:	83 ec 10             	sub    $0x10,%esp
 8048977:	50                   	push   %eax
 8048978:	68 a0 c3 04 08       	push   $0x804c3a0
 804897d:	ff d2                	call   *%edx
 804897f:	83 c4 10             	add    $0x10,%esp
 8048982:	c9                   	leave  
 8048983:	f3 c3                	repz ret 
 8048985:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 8048989:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

08048990 <__do_global_dtors_aux>:
 8048990:	80 3d c8 c3 04 08 00 	cmpb   $0x0,0x804c3c8
 8048997:	75 13                	jne    80489ac <__do_global_dtors_aux+0x1c>
 8048999:	55                   	push   %ebp
 804899a:	89 e5                	mov    %esp,%ebp
 804899c:	83 ec 08             	sub    $0x8,%esp
 804899f:	e8 7c ff ff ff       	call   8048920 <deregister_tm_clones>
 80489a4:	c6 05 c8 c3 04 08 01 	movb   $0x1,0x804c3c8
 80489ab:	c9                   	leave  
 80489ac:	f3 c3                	repz ret 
 80489ae:	66 90                	xchg   %ax,%ax

080489b0 <frame_dummy>:
 80489b0:	b8 10 bf 04 08       	mov    $0x804bf10,%eax
 80489b5:	8b 10                	mov    (%eax),%edx
 80489b7:	85 d2                	test   %edx,%edx
 80489b9:	75 05                	jne    80489c0 <frame_dummy+0x10>
 80489bb:	eb 93                	jmp    8048950 <register_tm_clones>
 80489bd:	8d 76 00             	lea    0x0(%esi),%esi
 80489c0:	ba 00 00 00 00       	mov    $0x0,%edx
 80489c5:	85 d2                	test   %edx,%edx
 80489c7:	74 f2                	je     80489bb <frame_dummy+0xb>
 80489c9:	55                   	push   %ebp
 80489ca:	89 e5                	mov    %esp,%ebp
 80489cc:	83 ec 14             	sub    $0x14,%esp
 80489cf:	50                   	push   %eax
 80489d0:	ff d2                	call   *%edx
 80489d2:	83 c4 10             	add    $0x10,%esp
 80489d5:	c9                   	leave  
 80489d6:	e9 75 ff ff ff       	jmp    8048950 <register_tm_clones>

080489db <main>:
 80489db:	8d 4c 24 04          	lea    0x4(%esp),%ecx
 80489df:	83 e4 f0             	and    $0xfffffff0,%esp
 80489e2:	ff 71 fc             	pushl  -0x4(%ecx)
 80489e5:	55                   	push   %ebp
 80489e6:	89 e5                	mov    %esp,%ebp
 80489e8:	53                   	push   %ebx
 80489e9:	51                   	push   %ecx
 80489ea:	8b 01                	mov    (%ecx),%eax
 80489ec:	8b 59 04             	mov    0x4(%ecx),%ebx
 80489ef:	83 f8 01             	cmp    $0x1,%eax
 80489f2:	75 0c                	jne    8048a00 <main+0x25>
 80489f4:	a1 c0 c3 04 08       	mov    0x804c3c0,%eax
 80489f9:	a3 d0 c3 04 08       	mov    %eax,0x804c3d0
 80489fe:	eb 5b                	jmp    8048a5b <main+0x80>
 8048a00:	83 f8 02             	cmp    $0x2,%eax
 8048a03:	75 39                	jne    8048a3e <main+0x63>
 8048a05:	83 ec 08             	sub    $0x8,%esp
 8048a08:	68 50 9f 04 08       	push   $0x8049f50
 8048a0d:	ff 73 04             	pushl  0x4(%ebx)
 8048a10:	e8 0b fe ff ff       	call   8048820 <fopen@plt>
 8048a15:	a3 d0 c3 04 08       	mov    %eax,0x804c3d0
 8048a1a:	83 c4 10             	add    $0x10,%esp
 8048a1d:	85 c0                	test   %eax,%eax
 8048a1f:	75 3a                	jne    8048a5b <main+0x80>
 8048a21:	ff 73 04             	pushl  0x4(%ebx)
 8048a24:	ff 33                	pushl  (%ebx)
 8048a26:	68 52 9f 04 08       	push   $0x8049f52
 8048a2b:	6a 01                	push   $0x1
 8048a2d:	e8 0e fe ff ff       	call   8048840 <__printf_chk@plt>
 8048a32:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
 8048a39:	e8 a2 fd ff ff       	call   80487e0 <exit@plt>
 8048a3e:	83 ec 04             	sub    $0x4,%esp
 8048a41:	ff 33                	pushl  (%ebx)
 8048a43:	68 6f 9f 04 08       	push   $0x8049f6f
 8048a48:	6a 01                	push   $0x1
 8048a4a:	e8 f1 fd ff ff       	call   8048840 <__printf_chk@plt>
 8048a4f:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
 8048a56:	e8 85 fd ff ff       	call   80487e0 <exit@plt>
 8048a5b:	e8 a0 06 00 00       	call   8049100 <initialize_bomb>
 8048a60:	83 ec 0c             	sub    $0xc,%esp
 8048a63:	68 d4 9f 04 08       	push   $0x8049fd4
 8048a68:	e8 53 fd ff ff       	call   80487c0 <puts@plt>
 8048a6d:	c7 04 24 10 a0 04 08 	movl   $0x804a010,(%esp)
 8048a74:	e8 47 fd ff ff       	call   80487c0 <puts@plt>
 8048a79:	e8 74 07 00 00       	call   80491f2 <read_line>
 8048a7e:	89 04 24             	mov    %eax,(%esp)
 8048a81:	e8 ad 00 00 00       	call   8048b33 <phase_1>
 8048a86:	e8 60 08 00 00       	call   80492eb <phase_defused>
 8048a8b:	c7 04 24 3c a0 04 08 	movl   $0x804a03c,(%esp)
 8048a92:	e8 29 fd ff ff       	call   80487c0 <puts@plt>
 8048a97:	e8 56 07 00 00       	call   80491f2 <read_line>
 8048a9c:	89 04 24             	mov    %eax,(%esp)
 8048a9f:	e8 b0 00 00 00       	call   8048b54 <phase_2>
 8048aa4:	e8 42 08 00 00       	call   80492eb <phase_defused>
 8048aa9:	c7 04 24 89 9f 04 08 	movl   $0x8049f89,(%esp)
 8048ab0:	e8 0b fd ff ff       	call   80487c0 <puts@plt>
 8048ab5:	e8 38 07 00 00       	call   80491f2 <read_line>
 8048aba:	89 04 24             	mov    %eax,(%esp)
 8048abd:	e8 fd 00 00 00       	call   8048bbf <phase_3>
 8048ac2:	e8 24 08 00 00       	call   80492eb <phase_defused>
 8048ac7:	c7 04 24 a7 9f 04 08 	movl   $0x8049fa7,(%esp)
 8048ace:	e8 ed fc ff ff       	call   80487c0 <puts@plt>
 8048ad3:	e8 1a 07 00 00       	call   80491f2 <read_line>
 8048ad8:	89 04 24             	mov    %eax,(%esp)
 8048adb:	e8 9b 02 00 00       	call   8048d7b <phase_4>
 8048ae0:	e8 06 08 00 00       	call   80492eb <phase_defused>
 8048ae5:	c7 04 24 68 a0 04 08 	movl   $0x804a068,(%esp)
 8048aec:	e8 cf fc ff ff       	call   80487c0 <puts@plt>
 8048af1:	e8 fc 06 00 00       	call   80491f2 <read_line>
 8048af6:	89 04 24             	mov    %eax,(%esp)
 8048af9:	e8 f2 02 00 00       	call   8048df0 <phase_5>
 8048afe:	e8 e8 07 00 00       	call   80492eb <phase_defused>
 8048b03:	c7 04 24 b6 9f 04 08 	movl   $0x8049fb6,(%esp)
 8048b0a:	e8 b1 fc ff ff       	call   80487c0 <puts@plt>
 8048b0f:	e8 de 06 00 00       	call   80491f2 <read_line>
 8048b14:	89 04 24             	mov    %eax,(%esp)
 8048b17:	e8 54 03 00 00       	call   8048e70 <phase_6>
 8048b1c:	e8 ca 07 00 00       	call   80492eb <phase_defused>
 8048b21:	83 c4 10             	add    $0x10,%esp
 8048b24:	b8 00 00 00 00       	mov    $0x0,%eax
 8048b29:	8d 65 f8             	lea    -0x8(%ebp),%esp
 8048b2c:	59                   	pop    %ecx
 8048b2d:	5b                   	pop    %ebx
 8048b2e:	5d                   	pop    %ebp
 8048b2f:	8d 61 fc             	lea    -0x4(%ecx),%esp
 8048b32:	c3                   	ret    

08048b33 <phase_1>:
 8048b33:	83 ec 14             	sub    $0x14,%esp
 8048b36:	68 8c a0 04 08       	push   $0x804a08c
 8048b3b:	ff 74 24 1c          	pushl  0x1c(%esp)
 8048b3f:	e8 57 05 00 00       	call   804909b <strings_not_equal>
 8048b44:	83 c4 10             	add    $0x10,%esp
 8048b47:	85 c0                	test   %eax,%eax
 8048b49:	74 05                	je     8048b50 <phase_1+0x1d>
 8048b4b:	e8 42 06 00 00       	call   8049192 <explode_bomb>
 8048b50:	83 c4 0c             	add    $0xc,%esp
 8048b53:	c3                   	ret    

08048b54 <phase_2>:
 8048b54:	56                   	push   %esi
 8048b55:	53                   	push   %ebx
 8048b56:	83 ec 2c             	sub    $0x2c,%esp
 8048b59:	65 a1 14 00 00 00    	mov    %gs:0x14,%eax
 8048b5f:	89 44 24 24          	mov    %eax,0x24(%esp)
 8048b63:	31 c0                	xor    %eax,%eax
 8048b65:	8d 44 24 0c          	lea    0xc(%esp),%eax
 8048b69:	50                   	push   %eax
 8048b6a:	ff 74 24 3c          	pushl  0x3c(%esp)
 8048b6e:	e8 44 06 00 00       	call   80491b7 <read_six_numbers>		//第二关要求输入内容：6个数字
 8048b73:	83 c4 10             	add    $0x10,%esp
 8048b76:	83 7c 24 04 00       	cmpl   $0x0,0x4(%esp)				//一个数要等于0，才能通过
 8048b7b:	75 07                	jne    8048b84 <phase_2+0x30>			//不等跳到引爆炸弹函数
 8048b7d:	83 7c 24 08 01       	cmpl   $0x1,0x8(%esp)				//一个数要等于1，才能通过
 8048b82:	74 05                	je     8048b89 <phase_2+0x35>			//相等则进入下一次判断
 8048b84:	e8 09 06 00 00       	call   8049192 <explode_bomb>
//循环
 8048b89:	8d 5c 24 04          	lea    0x4(%esp),%ebx				//走到这里，已经有2个数判断正确		第一次执行此句，ebx放了第一个数0的地址
 8048b8d:	8d 74 24 14          	lea    0x14(%esp),%esi				//esi保存最后一个值的位置
 8048b91:	8b 43 04             	mov    0x4(%ebx),%eax				//第一次执行此句，eax存了输入的第二个数1
 8048b94:	03 03                	add    (%ebx),%eax				//第一次执行此句，是前两个数相加
 8048b96:	39 43 08             	cmp    %eax,0x8(%ebx)				//第一次执行此句，前两个数相加得到的结果与第三个数相比较
 8048b99:	74 05                	je     8048ba0 <phase_2+0x4c>
 8048b9b:	e8 f2 05 00 00       	call   8049192 <explode_bomb>
 8048ba0:	83 c3 04             	add    $0x4,%ebx				//第一次执行此句，ebx存的东西变成了指向第二个数1的地址
 8048ba3:	39 f3                	cmp    %esi,%ebx				//看ebx是否已经指到了最后一个数
 8048ba5:	75 ea                	jne    8048b91 <phase_2+0x3d>			//从这里可以看出以上是一个循环
//循环结束
 8048ba7:	8b 44 24 1c          	mov    0x1c(%esp),%eax
 8048bab:	65 33 05 14 00 00 00 	xor    %gs:0x14,%eax
 8048bb2:	74 05                	je     8048bb9 <phase_2+0x65>
 8048bb4:	e8 d7 fb ff ff       	call   8048790 <__stack_chk_fail@plt>
 8048bb9:	83 c4 24             	add    $0x24,%esp
 8048bbc:	5b                   	pop    %ebx
 8048bbd:	5e                   	pop    %esi
 8048bbe:	c3                   	ret    

08048bbf <phase_3>:
 8048bbf:	83 ec 28             	sub    $0x28,%esp
 8048bc2:	65 a1 14 00 00 00    	mov    %gs:0x14,%eax
 8048bc8:	89 44 24 18          	mov    %eax,0x18(%esp)
 8048bcc:	31 c0                	xor    %eax,%eax
 8048bce:	8d 44 24 14          	lea    0x14(%esp),%eax
 8048bd2:	50                   	push   %eax
 8048bd3:	8d 44 24 13          	lea    0x13(%esp),%eax
 8048bd7:	50                   	push   %eax
 8048bd8:	8d 44 24 18          	lea    0x18(%esp),%eax
 8048bdc:	50                   	push   %eax
 8048bdd:	68 e6 a0 04 08       	push   $0x804a0e6					//使用x/s 0x804a0e6，可以看到该地址下的内容为 %d %c %d
 8048be2:	ff 74 24 3c          	pushl  0x3c(%esp)
 8048be6:	e8 25 fc ff ff       	call   8048810 <__isoc99_sscanf@plt>
 8048beb:	83 c4 20             	add    $0x20,%esp
 8048bee:	83 f8 02             	cmp    $0x2,%eax					//scanf函数的返回值是成功读取数据的个数，返回值放在eax里，也就是说，这关第一个要求是输入的数据个数大于2（与要求输入的格式对应）
 8048bf1:	7f 05                	jg     8048bf8 <phase_3+0x39>
 8048bf3:	e8 9a 05 00 00       	call   8049192 <explode_bomb>
 8048bf8:	83 7c 24 04 07       	cmpl   $0x7,0x4(%esp)					//输入的第一个数要小于等于7（8种情况），才不会在下一句跳转
 8048bfd:	0f 87 ef 00 00 00    	ja     8048cf2 <phase_3+0x133>				//这个地址是直接引爆炸弹
 8048c03:	8b 44 24 04          	mov    0x4(%esp),%eax					//将输入的第一个数传给eax
 8048c07:	ff 24 85 f8 a0 04 08 	jmp    *0x804a0f8(,%eax,4)				//根据eax的取值来跳转到不同的地址（switch语句）	
												//用gdb单步调试到这里之后用x/10x 0x804a0f8查看这个地址中的内容（可以看出来这个地址是个指针数组）
 8048c0e:	b8 63 00 00 00       	mov    $0x63,%eax					//switch分支一
 8048c13:	83 7c 24 08 47       	cmpl   $0x47,0x8(%esp)
 8048c18:	0f 84 de 00 00 00    	je     8048cfc <phase_3+0x13d>
 8048c1e:	e8 6f 05 00 00       	call   8049192 <explode_bomb>
 8048c23:	b8 63 00 00 00       	mov    $0x63,%eax
 8048c28:	e9 cf 00 00 00       	jmp    8048cfc <phase_3+0x13d>
 8048c2d:	b8 6e 00 00 00       	mov    $0x6e,%eax					//switch分支二	
 8048c32:	81 7c 24 08 88 00 00 	cmpl   $0x88,0x8(%esp)
 8048c39:	00 
 8048c3a:	0f 84 bc 00 00 00    	je     8048cfc <phase_3+0x13d>
 8048c40:	e8 4d 05 00 00       	call   8049192 <explode_bomb>
 8048c45:	b8 6e 00 00 00       	mov    $0x6e,%eax					
 8048c4a:	e9 ad 00 00 00       	jmp    8048cfc <phase_3+0x13d>
 8048c4f:	b8 70 00 00 00       	mov    $0x70,%eax					//switch分支三
 8048c54:	81 7c 24 08 b1 01 00 	cmpl   $0x1b1,0x8(%esp)
 8048c5b:	00 
 8048c5c:	0f 84 9a 00 00 00    	je     8048cfc <phase_3+0x13d>
 8048c62:	e8 2b 05 00 00       	call   8049192 <explode_bomb>
 8048c67:	b8 70 00 00 00       	mov    $0x70,%eax					
 8048c6c:	e9 8b 00 00 00       	jmp    8048cfc <phase_3+0x13d>
 8048c71:	b8 79 00 00 00       	mov    $0x79,%eax					//switch分支四
 8048c76:	83 7c 24 08 3d       	cmpl   $0x3d,0x8(%esp)
 8048c7b:	74 7f                	je     8048cfc <phase_3+0x13d>
 8048c7d:	e8 10 05 00 00       	call   8049192 <explode_bomb>
 8048c82:	b8 79 00 00 00       	mov    $0x79,%eax					
 8048c87:	eb 73                	jmp    8048cfc <phase_3+0x13d>
 8048c89:	b8 68 00 00 00       	mov    $0x68,%eax					//switch分支五
 8048c8e:	81 7c 24 08 0b 02 00 	cmpl   $0x20b,0x8(%esp)
 8048c95:	00 
 8048c96:	74 64                	je     8048cfc <phase_3+0x13d>
 8048c98:	e8 f5 04 00 00       	call   8049192 <explode_bomb>
 8048c9d:	b8 68 00 00 00       	mov    $0x68,%eax
 8048ca2:	eb 58                	jmp    8048cfc <phase_3+0x13d>
 8048ca4:	b8 61 00 00 00       	mov    $0x61,%eax					//switch分支六
 8048ca9:	83 7c 24 08 7e       	cmpl   $0x7e,0x8(%esp)
 8048cae:	74 4c                	je     8048cfc <phase_3+0x13d>
 8048cb0:	e8 dd 04 00 00       	call   8049192 <explode_bomb>
 8048cb5:	b8 61 00 00 00       	mov    $0x61,%eax
 8048cba:	eb 40                	jmp    8048cfc <phase_3+0x13d>
 8048cbc:	b8 6a 00 00 00       	mov    $0x6a,%eax					//switch分支七
 8048cc1:	81 7c 24 08 cc 03 00 	cmpl   $0x3cc,0x8(%esp)
 8048cc8:	00 
 8048cc9:	74 31                	je     8048cfc <phase_3+0x13d>
 8048ccb:	e8 c2 04 00 00       	call   8049192 <explode_bomb>
 8048cd0:	b8 6a 00 00 00       	mov    $0x6a,%eax
 8048cd5:	eb 25                	jmp    8048cfc <phase_3+0x13d>
 8048cd7:	b8 6e 00 00 00       	mov    $0x6e,%eax					//switch分支八
 8048cdc:	81 7c 24 08 23 01 00 	cmpl   $0x123,0x8(%esp)
 8048ce3:	00 
 8048ce4:	74 16                	je     8048cfc <phase_3+0x13d>
 8048ce6:	e8 a7 04 00 00       	call   8049192 <explode_bomb>
 8048ceb:	b8 6e 00 00 00       	mov    $0x6e,%eax
 8048cf0:	eb 0a                	jmp    8048cfc <phase_3+0x13d>
 8048cf2:	e8 9b 04 00 00       	call   8049192 <explode_bomb>			//输入数据个数小于等于2时，直接跳到这一句
 8048cf7:	b8 71 00 00 00       	mov    $0x71,%eax
 8048cfc:	3a 44 24 03          	cmp    0x3(%esp),%al				//switch语句通过后，会跳到这一句（$esp+3是输入的字母可能是由于内存对齐，字母才放到了这个位置）
 8048d00:	74 05                	je     8048d07 <phase_3+0x148>
 8048d02:	e8 8b 04 00 00       	call   8049192 <explode_bomb>
 8048d07:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8048d0b:	65 33 05 14 00 00 00 	xor    %gs:0x14,%eax
 8048d12:	74 05                	je     8048d19 <phase_3+0x15a>
 8048d14:	e8 77 fa ff ff       	call   8048790 <__stack_chk_fail@plt>
 8048d19:	83 c4 1c             	add    $0x1c,%esp
 8048d1c:	c3                   	ret    

08048d1d <func4>:									//处理func4的方法：根据汇编代码写出func4的C代码
 8048d1d:	56                   	push   %esi
 8048d1e:	53                   	push   %ebx
 8048d1f:	83 ec 04             	sub    $0x4,%esp
 8048d22:	8b 4c 24 10          	mov    0x10(%esp),%ecx		//a
 8048d26:	8b 5c 24 14          	mov    0x14(%esp),%ebx		//b
 8048d2a:	8b 74 24 18          	mov    0x18(%esp),%esi		//c
 8048d2e:	89 f0                	mov    %esi,%eax			//eax = c
 8048d30:	29 d8                	sub    %ebx,%eax			//eax = t = c - b
 8048d32:	89 c2                	mov    %eax,%edx			//edx = s = t
 8048d34:	c1 ea 1f             	shr    $0x1f,%edx			//edx = s = s >> 31(逻辑右移，高位补0)
 8048d37:	01 d0                	add    %edx,%eax			//eax = t = s + t
 8048d39:	d1 f8                	sar    %eax				//eax = t = t >> 1
 8048d3b:	8d 14 18             	lea    (%eax,%ebx,1),%edx	//edx = s = eax + ebx*1 = t + b（括号中的1是比例系数）
 8048d3e:	39 ca                	cmp    %ecx,%edx
 8048d40:	7e 15                	jle    8048d57 <func4+0x3a>	//if(s <= a)
 8048d42:	83 ec 04             	sub    $0x4,%esp
 8048d45:	83 ea 01             	sub    $0x1,%edx			//edx = s = s - 1
 8048d48:	52                   	push   %edx				//push s
 8048d49:	53                   	push   %ebx				//push b
 8048d4a:	51                   	push   %ecx				//push a
 8048d4b:	e8 cd ff ff ff       	call   8048d1d <func4>		//递归调用
 8048d50:	83 c4 10             	add    $0x10,%esp
 8048d53:	01 c0                	add    %eax,%eax			//func4返回值在eax中，此返回值*2		return 2*func4(a, b, s)	
 8048d55:	eb 1e                	jmp    8048d75 <func4+0x58>	//func4结束
 8048d57:	b8 00 00 00 00       	mov    $0x0,%eax
 8048d5c:	39 ca                	cmp    %ecx,%edx
 8048d5e:	7d 15                	jge    8048d75 <func4+0x58>	//if(s >= a)
 8048d60:	83 ec 04             	sub    $0x4,%esp
 8048d63:	56                   	push   %esi				//push c
 8048d64:	83 c2 01             	add    $0x1,%edx			//edx = s = s + 1
 8048d67:	52                   	push   %edx				//push s
 8048d68:	51                   	push   %ecx				//push a
 8048d69:	e8 af ff ff ff       	call   8048d1d <func4>		//递归调用
 8048d6e:	83 c4 10             	add    $0x10,%esp
 8048d71:	8d 44 00 01          	lea    0x1(%eax,%eax,1),%eax	//eax = eax + eax*1 + 1			return 2*func4(a, s, c) + 1
 8048d75:	83 c4 04             	add    $0x4,%esp
 8048d78:	5b                   	pop    %ebx
 8048d79:	5e                   	pop    %esi
 8048d7a:	c3                   	ret    

08048d7b <phase_4>:
 8048d7b:	83 ec 1c             	sub    $0x1c,%esp
 8048d7e:	65 a1 14 00 00 00    	mov    %gs:0x14,%eax
 8048d84:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8048d88:	31 c0                	xor    %eax,%eax
 8048d8a:	8d 44 24 08          	lea    0x8(%esp),%eax
 8048d8e:	50                   	push   %eax
 8048d8f:	8d 44 24 08          	lea    0x8(%esp),%eax
 8048d93:	50                   	push   %eax
 8048d94:	68 37 a2 04 08       	push   $0x804a237					//使用x/s查看地址中的内容，是%d %d，即本关要求输入两个数字
 8048d99:	ff 74 24 2c          	pushl  0x2c(%esp)
 8048d9d:	e8 6e fa ff ff       	call   8048810 <__isoc99_sscanf@plt>
 8048da2:	83 c4 10             	add    $0x10,%esp
 8048da5:	83 f8 02             	cmp    $0x2,%eax		
 8048da8:	75 07                	jne    8048db1 <phase_4+0x36>			//输入数据个数不是2，直接引爆炸弹
 8048daa:	83 7c 24 04 0e       	cmpl   $0xe,0x4(%esp)
 8048daf:	76 05                	jbe    8048db6 <phase_4+0x3b>			//第一个数据要小于等于e（十六进制），才不会引爆炸弹
 8048db1:	e8 dc 03 00 00       	call   8049192 <explode_bomb>
 8048db6:	83 ec 04             	sub    $0x4,%esp
 8048db9:	6a 0e                	push   $0xe						//func4的第三个参数：e（十六进制）
 8048dbb:	6a 00                	push   $0x0						//func4的第二个参数：0
 8048dbd:	ff 74 24 10          	pushl  0x10(%esp)					//func4的第一个参数（即本关要输入的第一个数字）：未知（代入用C语言写好的递归函数中，求解）
 8048dc1:	e8 57 ff ff ff       	call   8048d1d <func4>
 8048dc6:	83 c4 10             	add    $0x10,%esp
 8048dc9:	83 f8 07             	cmp    $0x7,%eax
 8048dcc:	75 07                	jne    8048dd5 <phase_4+0x5a>			//eax中存入的数不是7则引爆炸弹（即要求func4最后的返回结果必须是7）
 8048dce:	83 7c 24 08 07       	cmpl   $0x7,0x8(%esp)				//$esp+8中存放的必须是7，才不会引爆炸弹
 8048dd3:	74 05                	je     8048dda <phase_4+0x5f>
 8048dd5:	e8 b8 03 00 00       	call   8049192 <explode_bomb>
 8048dda:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8048dde:	65 33 05 14 00 00 00 	xor    %gs:0x14,%eax
 8048de5:	74 05                	je     8048dec <phase_4+0x71>
 8048de7:	e8 a4 f9 ff ff       	call   8048790 <__stack_chk_fail@plt>
 8048dec:	83 c4 1c             	add    $0x1c,%esp
 8048def:	c3                   	ret    

08048df0 <phase_5>:
 8048df0:	53                   	push   %ebx
 8048df1:	83 ec 24             	sub    $0x24,%esp
 8048df4:	8b 5c 24 2c          	mov    0x2c(%esp),%ebx			
 8048df8:	65 a1 14 00 00 00    	mov    %gs:0x14,%eax
 8048dfe:	89 44 24 18          	mov    %eax,0x18(%esp)
 8048e02:	31 c0                	xor    %eax,%eax
 8048e04:	53                   	push   %ebx					//ebx存了输入的字符串的地址
 8048e05:	e8 72 02 00 00       	call   804907c <string_length>
 8048e0a:	83 c4 10             	add    $0x10,%esp
 8048e0d:	83 f8 06             	cmp    $0x6,%eax				//string_length函数的返回值必须是6，不然引爆炸弹
 8048e10:	74 05                	je     8048e17 <phase_5+0x27>
 8048e12:	e8 7b 03 00 00       	call   8049192 <explode_bomb>
----------------------------------------------------------------------------------------//循环
//以输入的字符串为索引，从0x804a118地址开始存储的16英文字母中取出d e v i l s这六个字母
 8048e17:	b8 00 00 00 00       	mov    $0x0,%eax
 8048e1c:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx			//ebx + eax*1是一个地址，取这个地址中一个字节的内容扩展到32位赋值给edx（依次取出输入的六个字符）
 8048e20:	83 e2 0f             	and    $0xf,%edx				//保留edx的最低4位
 8048e23:	0f b6 92 18 a1 04 08 	movzbl 0x804a118(%edx),%edx			//0x804a118开始是一堆英文字母maduiersnfotvbyl（正好16个），其中包含了“devils”中所包含的6个字母
 8048e2a:	88 54 04 05          	mov    %dl,0x5(%esp,%eax,1)			//从esp+5的位置开始存放一个字符串（6位）
 8048e2e:	83 c0 01             	add    $0x1,%eax
 8048e31:	83 f8 06             	cmp    $0x6,%eax				//循环，共6次，eax做计数器（同时也做指针）
 8048e34:	75 e6                	jne    8048e1c <phase_5+0x2c>
----------------------------------------------------------------------------------------//结束循环
 8048e36:	c6 44 24 0b 00       	movb   $0x0,0xb(%esp)				//字符串结尾标志
 8048e3b:	83 ec 08             	sub    $0x8,%esp
 8048e3e:	68 ef a0 04 08       	push   $0x804a0ef				//地址中的内容是devils（待比较的字符串之一）
 8048e43:	8d 44 24 11          	lea    0x11(%esp),%eax
 8048e47:	50                   	push   %eax					//待比较的字符串之二（即刚才在循环中存入的字符串）
 8048e48:	e8 4e 02 00 00       	call   804909b <strings_not_equal>		//判断字符串是否相等
 8048e4d:	83 c4 10             	add    $0x10,%esp
 8048e50:	85 c0                	test   %eax,%eax				//eax必须是0，test后才有ZF = 0，后面才会跳转
 8048e52:	74 05                	je     8048e59 <phase_5+0x69>			//也即jz
 8048e54:	e8 39 03 00 00       	call   8049192 <explode_bomb>
 8048e59:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8048e5d:	65 33 05 14 00 00 00 	xor    %gs:0x14,%eax
 8048e64:	74 05                	je     8048e6b <phase_5+0x7b>
 8048e66:	e8 25 f9 ff ff       	call   8048790 <__stack_chk_fail@plt>
 8048e6b:	83 c4 18             	add    $0x18,%esp
 8048e6e:	5b                   	pop    %ebx
 8048e6f:	c3                   	ret    

08048e70 <phase_6>:
 8048e70:	56                   	push   %esi
 8048e71:	53                   	push   %ebx
 8048e72:	83 ec 4c             	sub    $0x4c,%esp
 8048e75:	65 a1 14 00 00 00    	mov    %gs:0x14,%eax
 8048e7b:	89 44 24 44          	mov    %eax,0x44(%esp)
 8048e7f:	31 c0                	xor    %eax,%eax
 8048e81:	8d 44 24 14          	lea    0x14(%esp),%eax
 8048e85:	50                   	push   %eax
 8048e86:	ff 74 24 5c          	pushl  0x5c(%esp)
 8048e8a:	e8 28 03 00 00       	call   80491b7 <read_six_numbers>	//读6个数字
 8048e8f:	83 c4 10             	add    $0x10,%esp
 8048e92:	be 00 00 00 00       	mov    $0x0,%esi			//esi做下标
 8048e97:	8b 44 b4 0c          	mov    0xc(%esp,%esi,4),%eax		//依次取输入的每个数给eax（外循环从这里开始）
 8048e9b:	83 e8 01             	sub    $0x1,%eax
 8048e9e:	83 f8 05             	cmp    $0x5,%eax			//刚取出的数减1后和5比较
 8048ea1:	76 05                	jbe    8048ea8 <phase_6+0x38>		//必须小于等于5才不会引爆炸弹（也即刚取出的数必须小于等于6）
 8048ea3:	e8 ea 02 00 00       	call   8049192 <explode_bomb>
 8048ea8:	83 c6 01             	add    $0x1,%esi
 8048eab:	83 fe 06             	cmp    $0x6,%esi			//判断外循环是否结束
 8048eae:	74 33                	je     8048ee3 <phase_6+0x73>
 8048eb0:	89 f3                	mov    %esi,%ebx
 8048eb2:	8b 44 9c 0c          	mov    0xc(%esp,%ebx,4),%eax			//取下一个数给eax（内循环从这里开始）
 8048eb6:	39 44 b4 08          	cmp    %eax,0x8(%esp,%esi,4)			//判断两个数是否相等
 8048eba:	75 05                	jne    8048ec1 <phase_6+0x51>
 8048ebc:	e8 d1 02 00 00       	call   8049192 <explode_bomb>			//即：如果输入的数字中有任意两个数字相等，就引爆炸弹
 8048ec1:	83 c3 01             	add    $0x1,%ebx
 8048ec4:	83 fb 05             	cmp    $0x5,%ebx
 8048ec7:	7e e9                	jle    8048eb2 <phase_6+0x42>			//ebx小于等于5继续内循环
 8048ec9:	eb cc                	jmp    8048e97 <phase_6+0x27>		//继续外循环		
//-------------------------------------------------------------------------------------------------------------------------------------------分割线
 8048ecb:	8b 52 08             	mov    0x8(%edx),%edx			//第二次内循环由此开始，结构体首地址+8作为地址，取这个地址里的内容给edx
										//（这个地址中的内容是一个指针，指向6个结构体中的一个）
										//六个结构体初始指向关系为：node1->node2->node3->node4->node5->node6
 8048ece:	83 c0 01             	add    $0x1,%eax
 8048ed1:	39 c8                	cmp    %ecx,%eax
 8048ed3:	75 f6                	jne    8048ecb <phase_6+0x5b>
 8048ed5:	89 54 b4 24          	mov    %edx,0x24(%esp,%esi,4)		//第二次的内循环结束后跳转到这（8048efd的jmp）
										//$esp + 0x24是堆栈中紧挨在输入的六个数字之后的位置
										//（从这里开始保存六个结构体的地址值）
 8048ed9:	83 c3 01             	add    $0x1,%ebx
 8048edc:	83 fb 06             	cmp    $0x6,%ebx			//判断第二次外循环是否结束
 8048edf:	75 07                	jne    8048ee8 <phase_6+0x78>		//外循环没结束，继续
 8048ee1:	eb 1c                	jmp    8048eff <phase_6+0x8f>		//第二次外循环结束
 8048ee3:	bb 00 00 00 00       	mov    $0x0,%ebx			//第一次的外循环结束跳到这一句，为第二次循环初始化ebx
 8048ee8:	89 de                	mov    %ebx,%esi			//第二次外循环的起始位置
 8048eea:	8b 4c 9c 0c          	mov    0xc(%esp,%ebx,4),%ecx		//首先取的是输入的第一个数字
 8048eee:	b8 01 00 00 00       	mov    $0x1,%eax
 8048ef3:	ba 3c c1 04 08       	mov    $0x804c13c,%edx			//从0x804c13c这个地址开始，是一个结构体数组
										//每一个结构体占了12个字节（两个int+一个指针），共有6个结构体
 8048ef8:	83 f9 01             	cmp    $0x1,%ecx
 8048efb:	7f ce                	jg     8048ecb <phase_6+0x5b>		//ecx中的值大于1则循环
 8048efd:	eb d6                	jmp    8048ed5 <phase_6+0x65>		//ecx小于等于1
//-----------------------------------------------------------------------//以上的代码，由输入的数字决定了结构体地址存入堆栈的顺序，由于链表结构是node1 -> node2 -> ... -> node6，因此假如输入的数字是6 4 3 5 1 2 ，那么就是node6地址先存入堆栈，然后是node4，然后是node3，然后是node5，然后是node1，然后是node2
 8048eff:	8b 5c 24 24          	mov    0x24(%esp),%ebx			//第二次外循环结束
 8048f03:	8d 44 24 24          	lea    0x24(%esp),%eax
 8048f07:	8d 74 24 38          	lea    0x38(%esp),%esi			//最后一个结构体地址被存储在的地址
 8048f0b:	89 d9                	mov    %ebx,%ecx
 8048f0d:	8b 50 04             	mov    0x4(%eax),%edx			//链表排序，循环由此开始
 8048f10:	89 51 08             	mov    %edx,0x8(%ecx)
 8048f13:	83 c0 04             	add    $0x4,%eax
 8048f16:	89 d1                	mov    %edx,%ecx
 8048f18:	39 f0                	cmp    %esi,%eax
 8048f1a:	75 f1                	jne    8048f0d <phase_6+0x9d>
//----------------------------------------------------------------------//根据链表地址存入堆栈的顺序来进行链表排序，如开始输入的数字是6 4 3 5 1 2，将地址存入堆栈的顺序是node6 node4 node3 node5 node1 node2，经上述代码后，链表更新为node6 -> node4 -> node3 -> node5 -> node1 -> node2
 8048f1c:	c7 42 08 00 00 00 00 	movl   $0x0,0x8(%edx)
 8048f23:	be 05 00 00 00       	mov    $0x5,%esi
 8048f28:	8b 43 08             	mov    0x8(%ebx),%eax
 8048f2b:	8b 00                	mov    (%eax),%eax
 8048f2d:	39 03                	cmp    %eax,(%ebx)
 8048f2f:	7d 05                	jge    8048f36 <phase_6+0xc6>
 8048f31:	e8 5c 02 00 00       	call   8049192 <explode_bomb>
 8048f36:	8b 5b 08             	mov    0x8(%ebx),%ebx
 8048f39:	83 ee 01             	sub    $0x1,%esi
 8048f3c:	75 ea                	jne    8048f28 <phase_6+0xb8>
------------------------------------------------------------------------//以上代码是要求排序后的结构体链表中，各结构体第一个数字按从大到小排列，即假设排序后的链表更新为node6 -> node4 -> node3 -> node5 -> node1 -> node2，那么以上代码不引爆炸弹的要求就是node6.int1 > node4.int1 > node3.int1 > node5.int1 > node1.int1 > node2.int1，本代码中node1~node6的第一个数字分别是3d6 3e0 1da 151 e9 1f2，因此可知输入的数字为2 1 6 3 4 5 
 8048f3e:	8b 44 24 3c          	mov    0x3c(%esp),%eax
 8048f42:	65 33 05 14 00 00 00 	xor    %gs:0x14,%eax
 8048f49:	74 05                	je     8048f50 <phase_6+0xe0>
 8048f4b:	e8 40 f8 ff ff       	call   8048790 <__stack_chk_fail@plt>
 8048f50:	83 c4 44             	add    $0x44,%esp
 8048f53:	5b                   	pop    %ebx
 8048f54:	5e                   	pop    %esi
 8048f55:	c3                   	ret    

08048f56 <fun7>:
 8048f56:	53                   	push   %ebx
 8048f57:	83 ec 08             	sub    $0x8,%esp
 8048f5a:	8b 54 24 10          	mov    0x10(%esp),%edx			//取第一个参数p（即secret_phase中保存的立即数0x804c088）
 8048f5e:	8b 4c 24 14          	mov    0x14(%esp),%ecx			//取第二个参数a
 8048f62:	85 d2                	test   %edx,%edx
 8048f64:	74 37                	je     8048f9d <fun7+0x47>		//如果p = 0，跳转
 8048f66:	8b 1a                	mov    (%edx),%ebx			//否则a应该是一个地址，取这个地址里面的内容出来给ebx（ebx = *p）
 8048f68:	39 cb                	cmp    %ecx,%ebx
 8048f6a:	7e 13                	jle    8048f7f <fun7+0x29>		//*p <= a 跳转
 8048f6c:	83 ec 08             	sub    $0x8,%esp			//到这里说明*p > a
 8048f6f:	51                   	push   %ecx				//a（递归参数之一）
 8048f70:	ff 72 04             	pushl  0x4(%edx)			//*(p+4)（递归参数之一）
 8048f73:	e8 de ff ff ff       	call   8048f56 <fun7>			//递归
 8048f78:	83 c4 10             	add    $0x10,%esp
 8048f7b:	01 c0                	add    %eax,%eax			//这句完了跳转到fun7结束位置，即return 2*fun7(*(p+4), a)
 8048f7d:	eb 23                	jmp    8048fa2 <fun7+0x4c>
 8048f7f:	b8 00 00 00 00       	mov    $0x0,%eax
 8048f84:	39 cb                	cmp    %ecx,%ebx			//*p = a，跳转，返回值（eax）为0
 8048f86:	74 1a                	je     8048fa2 <fun7+0x4c>
 8048f88:	83 ec 08             	sub    $0x8,%esp			//到这里说明*p < a
 8048f8b:	51                   	push   %ecx				//a（递归参数之一）
 8048f8c:	ff 72 08             	pushl  0x8(%edx)			//*(p+8)（递归参数之一）
 8048f8f:	e8 c2 ff ff ff       	call   8048f56 <fun7>			//递归
 8048f94:	83 c4 10             	add    $0x10,%esp				
 8048f97:	8d 44 00 01          	lea    0x1(%eax,%eax,1),%eax		//return 2*fun7(*(p+8), a) + 1
 8048f9b:	eb 05                	jmp    8048fa2 <fun7+0x4c>
 8048f9d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax			//返回值0xfffffffff
 8048fa2:	83 c4 08             	add    $0x8,%esp
 8048fa5:	5b                   	pop    %ebx
 8048fa6:	c3                   	ret    

08048fa7 <secret_phase>:
 8048fa7:	53                   	push   %ebx
 8048fa8:	83 ec 08             	sub    $0x8,%esp
 8048fab:	e8 42 02 00 00       	call   80491f2 <read_line>
 8048fb0:	83 ec 04             	sub    $0x4,%esp
 8048fb3:	6a 0a                	push   $0xa
 8048fb5:	6a 00                	push   $0x0
 8048fb7:	50                   	push   %eax
 8048fb8:	e8 c3 f8 ff ff       	call   8048880 <strtol@plt>
 8048fbd:	89 c3                	mov    %eax,%ebx			//输入的内容本来在eax中，然后传给了ebx（ebx直接作为fun7的参数之一）
 8048fbf:	8d 40 ff             	lea    -0x1(%eax),%eax			//eax减一
 8048fc2:	83 c4 10             	add    $0x10,%esp
 8048fc5:	3d e8 03 00 00       	cmp    $0x3e8,%eax					
 8048fca:	76 05                	jbe    8048fd1 <secret_phase+0x2a>	//eax需要小于等于3e8才不会引爆炸弹
 8048fcc:	e8 c1 01 00 00       	call   8049192 <explode_bomb>
 8048fd1:	83 ec 08             	sub    $0x8,%esp
 8048fd4:	53                   	push   %ebx
 8048fd5:	68 88 c0 04 08       	push   $0x804c088			//push一个立即数（这个地址存了什么？）
 8048fda:	e8 77 ff ff ff       	call   8048f56 <fun7>
 8048fdf:	83 c4 10             	add    $0x10,%esp
 8048fe2:	83 f8 04             	cmp    $0x4,%eax			//eax是fun7的返回值，需要等于4
 8048fe5:	74 05                	je     8048fec <secret_phase+0x45>
 8048fe7:	e8 a6 01 00 00       	call   8049192 <explode_bomb>
 8048fec:	83 ec 0c             	sub    $0xc,%esp
 8048fef:	68 c0 a0 04 08       	push   $0x804a0c0			//Wow! You've defused the secret stage!
 8048ff4:	e8 c7 f7 ff ff       	call   80487c0 <puts@plt>
 8048ff9:	e8 ed 02 00 00       	call   80492eb <phase_defused>
 8048ffe:	83 c4 18             	add    $0x18,%esp
 8049001:	5b                   	pop    %ebx
 8049002:	c3                   	ret    

08049003 <sig_handler>:
 8049003:	83 ec 18             	sub    $0x18,%esp
 8049006:	68 28 a1 04 08       	push   $0x804a128
 804900b:	e8 b0 f7 ff ff       	call   80487c0 <puts@plt>
 8049010:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
 8049017:	e8 54 f7 ff ff       	call   8048770 <sleep@plt>
 804901c:	83 c4 08             	add    $0x8,%esp
 804901f:	68 ea a1 04 08       	push   $0x804a1ea
 8049024:	6a 01                	push   $0x1
 8049026:	e8 15 f8 ff ff       	call   8048840 <__printf_chk@plt>
 804902b:	83 c4 04             	add    $0x4,%esp
 804902e:	ff 35 c4 c3 04 08    	pushl  0x804c3c4
 8049034:	e8 07 f7 ff ff       	call   8048740 <fflush@plt>
 8049039:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
 8049040:	e8 2b f7 ff ff       	call   8048770 <sleep@plt>
 8049045:	c7 04 24 f2 a1 04 08 	movl   $0x804a1f2,(%esp)
 804904c:	e8 6f f7 ff ff       	call   80487c0 <puts@plt>
 8049051:	c7 04 24 10 00 00 00 	movl   $0x10,(%esp)
 8049058:	e8 83 f7 ff ff       	call   80487e0 <exit@plt>

0804905d <invalid_phase>:
 804905d:	83 ec 10             	sub    $0x10,%esp
 8049060:	ff 74 24 14          	pushl  0x14(%esp)
 8049064:	68 fa a1 04 08       	push   $0x804a1fa
 8049069:	6a 01                	push   $0x1
 804906b:	e8 d0 f7 ff ff       	call   8048840 <__printf_chk@plt>
 8049070:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
 8049077:	e8 64 f7 ff ff       	call   80487e0 <exit@plt>

0804907c <string_length>:
 804907c:	8b 54 24 04          	mov    0x4(%esp),%edx
 8049080:	80 3a 00             	cmpb   $0x0,(%edx)
 8049083:	74 10                	je     8049095 <string_length+0x19>
 8049085:	b8 00 00 00 00       	mov    $0x0,%eax
 804908a:	83 c0 01             	add    $0x1,%eax
 804908d:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
 8049091:	75 f7                	jne    804908a <string_length+0xe>
 8049093:	f3 c3                	repz ret 
 8049095:	b8 00 00 00 00       	mov    $0x0,%eax
 804909a:	c3                   	ret    

0804909b <strings_not_equal>:
 804909b:	57                   	push   %edi
 804909c:	56                   	push   %esi
 804909d:	53                   	push   %ebx
 804909e:	8b 5c 24 10          	mov    0x10(%esp),%ebx
 80490a2:	8b 74 24 14          	mov    0x14(%esp),%esi
 80490a6:	53                   	push   %ebx
 80490a7:	e8 d0 ff ff ff       	call   804907c <string_length>
 80490ac:	89 c7                	mov    %eax,%edi
 80490ae:	89 34 24             	mov    %esi,(%esp)
 80490b1:	e8 c6 ff ff ff       	call   804907c <string_length>
 80490b6:	83 c4 04             	add    $0x4,%esp
 80490b9:	ba 01 00 00 00       	mov    $0x1,%edx
 80490be:	39 c7                	cmp    %eax,%edi
 80490c0:	75 38                	jne    80490fa <strings_not_equal+0x5f>
 80490c2:	0f b6 03             	movzbl (%ebx),%eax
 80490c5:	84 c0                	test   %al,%al
 80490c7:	74 1e                	je     80490e7 <strings_not_equal+0x4c>
 80490c9:	3a 06                	cmp    (%esi),%al
 80490cb:	74 06                	je     80490d3 <strings_not_equal+0x38>
 80490cd:	eb 1f                	jmp    80490ee <strings_not_equal+0x53>
 80490cf:	3a 06                	cmp    (%esi),%al
 80490d1:	75 22                	jne    80490f5 <strings_not_equal+0x5a>
 80490d3:	83 c3 01             	add    $0x1,%ebx
 80490d6:	83 c6 01             	add    $0x1,%esi
 80490d9:	0f b6 03             	movzbl (%ebx),%eax
 80490dc:	84 c0                	test   %al,%al
 80490de:	75 ef                	jne    80490cf <strings_not_equal+0x34>
 80490e0:	ba 00 00 00 00       	mov    $0x0,%edx
 80490e5:	eb 13                	jmp    80490fa <strings_not_equal+0x5f>
 80490e7:	ba 00 00 00 00       	mov    $0x0,%edx
 80490ec:	eb 0c                	jmp    80490fa <strings_not_equal+0x5f>
 80490ee:	ba 01 00 00 00       	mov    $0x1,%edx
 80490f3:	eb 05                	jmp    80490fa <strings_not_equal+0x5f>
 80490f5:	ba 01 00 00 00       	mov    $0x1,%edx
 80490fa:	89 d0                	mov    %edx,%eax
 80490fc:	5b                   	pop    %ebx
 80490fd:	5e                   	pop    %esi
 80490fe:	5f                   	pop    %edi
 80490ff:	c3                   	ret    

08049100 <initialize_bomb>:
 8049100:	83 ec 14             	sub    $0x14,%esp
 8049103:	68 03 90 04 08       	push   $0x8049003
 8049108:	6a 02                	push   $0x2
 804910a:	e8 51 f6 ff ff       	call   8048760 <signal@plt>
 804910f:	83 c4 1c             	add    $0x1c,%esp
 8049112:	c3                   	ret    

08049113 <initialize_bomb_solve>:
 8049113:	f3 c3                	repz ret 

08049115 <blank_line>:
 8049115:	56                   	push   %esi
 8049116:	53                   	push   %ebx
 8049117:	83 ec 04             	sub    $0x4,%esp
 804911a:	8b 74 24 10          	mov    0x10(%esp),%esi
 804911e:	eb 14                	jmp    8049134 <blank_line+0x1f>
 8049120:	e8 8b f7 ff ff       	call   80488b0 <__ctype_b_loc@plt>
 8049125:	83 c6 01             	add    $0x1,%esi
 8049128:	0f be db             	movsbl %bl,%ebx
 804912b:	8b 00                	mov    (%eax),%eax
 804912d:	f6 44 58 01 20       	testb  $0x20,0x1(%eax,%ebx,2)
 8049132:	74 0e                	je     8049142 <blank_line+0x2d>
 8049134:	0f b6 1e             	movzbl (%esi),%ebx
 8049137:	84 db                	test   %bl,%bl
 8049139:	75 e5                	jne    8049120 <blank_line+0xb>
 804913b:	b8 01 00 00 00       	mov    $0x1,%eax
 8049140:	eb 05                	jmp    8049147 <blank_line+0x32>
 8049142:	b8 00 00 00 00       	mov    $0x0,%eax
 8049147:	83 c4 04             	add    $0x4,%esp
 804914a:	5b                   	pop    %ebx
 804914b:	5e                   	pop    %esi
 804914c:	c3                   	ret    

0804914d <skip>:
 804914d:	53                   	push   %ebx
 804914e:	83 ec 08             	sub    $0x8,%esp
 8049151:	83 ec 04             	sub    $0x4,%esp
 8049154:	ff 35 d0 c3 04 08    	pushl  0x804c3d0
 804915a:	6a 50                	push   $0x50
 804915c:	a1 cc c3 04 08       	mov    0x804c3cc,%eax
 8049161:	8d 04 80             	lea    (%eax,%eax,4),%eax
 8049164:	c1 e0 04             	shl    $0x4,%eax
 8049167:	05 e0 c3 04 08       	add    $0x804c3e0,%eax
 804916c:	50                   	push   %eax
 804916d:	e8 de f5 ff ff       	call   8048750 <fgets@plt>
 8049172:	89 c3                	mov    %eax,%ebx
 8049174:	83 c4 10             	add    $0x10,%esp
 8049177:	85 c0                	test   %eax,%eax
 8049179:	74 10                	je     804918b <skip+0x3e>
 804917b:	83 ec 0c             	sub    $0xc,%esp
 804917e:	50                   	push   %eax
 804917f:	e8 91 ff ff ff       	call   8049115 <blank_line>
 8049184:	83 c4 10             	add    $0x10,%esp
 8049187:	85 c0                	test   %eax,%eax
 8049189:	75 c6                	jne    8049151 <skip+0x4>
 804918b:	89 d8                	mov    %ebx,%eax
 804918d:	83 c4 08             	add    $0x8,%esp
 8049190:	5b                   	pop    %ebx
 8049191:	c3                   	ret    

08049192 <explode_bomb>:
 8049192:	83 ec 18             	sub    $0x18,%esp
 8049195:	68 0b a2 04 08       	push   $0x804a20b
 804919a:	e8 21 f6 ff ff       	call   80487c0 <puts@plt>
 804919f:	c7 04 24 14 a2 04 08 	movl   $0x804a214,(%esp)
 80491a6:	e8 15 f6 ff ff       	call   80487c0 <puts@plt>
 80491ab:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
 80491b2:	e8 29 f6 ff ff       	call   80487e0 <exit@plt>

080491b7 <read_six_numbers>:
 80491b7:	83 ec 0c             	sub    $0xc,%esp
 80491ba:	8b 44 24 14          	mov    0x14(%esp),%eax
 80491be:	8d 50 14             	lea    0x14(%eax),%edx
 80491c1:	52                   	push   %edx
 80491c2:	8d 50 10             	lea    0x10(%eax),%edx
 80491c5:	52                   	push   %edx
 80491c6:	8d 50 0c             	lea    0xc(%eax),%edx
 80491c9:	52                   	push   %edx
 80491ca:	8d 50 08             	lea    0x8(%eax),%edx
 80491cd:	52                   	push   %edx
 80491ce:	8d 50 04             	lea    0x4(%eax),%edx
 80491d1:	52                   	push   %edx
 80491d2:	50                   	push   %eax
 80491d3:	68 2b a2 04 08       	push   $0x804a22b
 80491d8:	ff 74 24 2c          	pushl  0x2c(%esp)
 80491dc:	e8 2f f6 ff ff       	call   8048810 <__isoc99_sscanf@plt>
 80491e1:	83 c4 20             	add    $0x20,%esp
 80491e4:	83 f8 05             	cmp    $0x5,%eax
 80491e7:	7f 05                	jg     80491ee <read_six_numbers+0x37>
 80491e9:	e8 a4 ff ff ff       	call   8049192 <explode_bomb>
 80491ee:	83 c4 0c             	add    $0xc,%esp
 80491f1:	c3                   	ret    

080491f2 <read_line>:
 80491f2:	57                   	push   %edi
 80491f3:	56                   	push   %esi
 80491f4:	53                   	push   %ebx
 80491f5:	e8 53 ff ff ff       	call   804914d <skip>
 80491fa:	85 c0                	test   %eax,%eax
 80491fc:	75 70                	jne    804926e <read_line+0x7c>
 80491fe:	a1 c0 c3 04 08       	mov    0x804c3c0,%eax
 8049203:	39 05 d0 c3 04 08    	cmp    %eax,0x804c3d0
 8049209:	75 19                	jne    8049224 <read_line+0x32>
 804920b:	83 ec 0c             	sub    $0xc,%esp
 804920e:	68 3d a2 04 08       	push   $0x804a23d
 8049213:	e8 a8 f5 ff ff       	call   80487c0 <puts@plt>
 8049218:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
 804921f:	e8 bc f5 ff ff       	call   80487e0 <exit@plt>
 8049224:	83 ec 0c             	sub    $0xc,%esp
 8049227:	68 5b a2 04 08       	push   $0x804a25b
 804922c:	e8 7f f5 ff ff       	call   80487b0 <getenv@plt>
 8049231:	83 c4 10             	add    $0x10,%esp
 8049234:	85 c0                	test   %eax,%eax
 8049236:	74 0a                	je     8049242 <read_line+0x50>
 8049238:	83 ec 0c             	sub    $0xc,%esp
 804923b:	6a 00                	push   $0x0
 804923d:	e8 9e f5 ff ff       	call   80487e0 <exit@plt>
 8049242:	a1 c0 c3 04 08       	mov    0x804c3c0,%eax
 8049247:	a3 d0 c3 04 08       	mov    %eax,0x804c3d0
 804924c:	e8 fc fe ff ff       	call   804914d <skip>
 8049251:	85 c0                	test   %eax,%eax
 8049253:	75 19                	jne    804926e <read_line+0x7c>
 8049255:	83 ec 0c             	sub    $0xc,%esp
 8049258:	68 3d a2 04 08       	push   $0x804a23d
 804925d:	e8 5e f5 ff ff       	call   80487c0 <puts@plt>
 8049262:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
 8049269:	e8 72 f5 ff ff       	call   80487e0 <exit@plt>
 804926e:	8b 15 cc c3 04 08    	mov    0x804c3cc,%edx
 8049274:	8d 1c 92             	lea    (%edx,%edx,4),%ebx
 8049277:	c1 e3 04             	shl    $0x4,%ebx
 804927a:	81 c3 e0 c3 04 08    	add    $0x804c3e0,%ebx
 8049280:	b8 00 00 00 00       	mov    $0x0,%eax
 8049285:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
 804928a:	89 df                	mov    %ebx,%edi
 804928c:	f2 ae                	repnz scas %es:(%edi),%al
 804928e:	f7 d1                	not    %ecx
 8049290:	83 e9 01             	sub    $0x1,%ecx
 8049293:	83 f9 4e             	cmp    $0x4e,%ecx
 8049296:	7e 36                	jle    80492ce <read_line+0xdc>
 8049298:	83 ec 0c             	sub    $0xc,%esp
 804929b:	68 66 a2 04 08       	push   $0x804a266
 80492a0:	e8 1b f5 ff ff       	call   80487c0 <puts@plt>
 80492a5:	a1 cc c3 04 08       	mov    0x804c3cc,%eax
 80492aa:	8d 50 01             	lea    0x1(%eax),%edx
 80492ad:	89 15 cc c3 04 08    	mov    %edx,0x804c3cc
 80492b3:	6b c0 50             	imul   $0x50,%eax,%eax
 80492b6:	05 e0 c3 04 08       	add    $0x804c3e0,%eax
 80492bb:	be 81 a2 04 08       	mov    $0x804a281,%esi
 80492c0:	b9 04 00 00 00       	mov    $0x4,%ecx
 80492c5:	89 c7                	mov    %eax,%edi
 80492c7:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
 80492c9:	e8 c4 fe ff ff       	call   8049192 <explode_bomb>
 80492ce:	8d 04 92             	lea    (%edx,%edx,4),%eax
 80492d1:	c1 e0 04             	shl    $0x4,%eax
 80492d4:	c6 84 01 df c3 04 08 	movb   $0x0,0x804c3df(%ecx,%eax,1)
 80492db:	00 
 80492dc:	83 c2 01             	add    $0x1,%edx
 80492df:	89 15 cc c3 04 08    	mov    %edx,0x804c3cc
 80492e5:	89 d8                	mov    %ebx,%eax
 80492e7:	5b                   	pop    %ebx
 80492e8:	5e                   	pop    %esi
 80492e9:	5f                   	pop    %edi
 80492ea:	c3                   	ret    

080492eb <phase_defused>:
 80492eb:	83 ec 6c             	sub    $0x6c,%esp
 80492ee:	65 a1 14 00 00 00    	mov    %gs:0x14,%eax
 80492f4:	89 44 24 5c          	mov    %eax,0x5c(%esp)
 80492f8:	31 c0                	xor    %eax,%eax
 80492fa:	83 3d cc c3 04 08 06 	cmpl   $0x6,0x804c3cc
 8049301:	75 73                	jne    8049376 <phase_defused+0x8b>
 8049303:	83 ec 0c             	sub    $0xc,%esp
 8049306:	8d 44 24 18          	lea    0x18(%esp),%eax
 804930a:	50                   	push   %eax
 804930b:	8d 44 24 18          	lea    0x18(%esp),%eax
 804930f:	50                   	push   %eax
 8049310:	8d 44 24 18          	lea    0x18(%esp),%eax
 8049314:	50                   	push   %eax
 8049315:	68 91 a2 04 08       	push   $0x804a291			//%d %d %s
 804931a:	68 d0 c4 04 08       	push   $0x804c4d0			//存储：14 7（自己输入的）
 804931f:	e8 ec f4 ff ff       	call   8048810 <__isoc99_sscanf@plt>
 8049324:	83 c4 20             	add    $0x20,%esp
 8049327:	83 f8 03             	cmp    $0x3,%eax			//eax代表了scanf输入的数据数量
 804932a:	75 3a                	jne    8049366 <phase_defused+0x7b>
 804932c:	83 ec 08             	sub    $0x8,%esp
 804932f:	68 9a a2 04 08       	push   $0x804a29a			//存了一个字符串DrEvil
 8049334:	8d 44 24 18          	lea    0x18(%esp),%eax
 8049338:	50                   	push   %eax
 8049339:	e8 5d fd ff ff       	call   804909b <strings_not_equal>	//判断字符串是否相等
 804933e:	83 c4 10             	add    $0x10,%esp
 8049341:	85 c0                	test   %eax,%eax						
 8049343:	75 21                	jne    8049366 <phase_defused+0x7b>	//跳转则说明eax不等于0，即两字符串不相等
										//（这里不跳转才能进入隐藏关，这说明进入隐藏关要输入的字符串式DrEvil）
 8049345:	83 ec 0c             	sub    $0xc,%esp
 8049348:	68 60 a1 04 08       	push   $0x804a160			//Curses, you've found the secret phase!（解开隐藏关的提示语句）
 804934d:	e8 6e f4 ff ff       	call   80487c0 <puts@plt>
 8049352:	c7 04 24 88 a1 04 08 	movl   $0x804a188,(%esp)
 8049359:	e8 62 f4 ff ff       	call   80487c0 <puts@plt>
 804935e:	e8 44 fc ff ff       	call   8048fa7 <secret_phase>		//进入隐藏关
 8049363:	83 c4 10             	add    $0x10,%esp
 8049366:	83 ec 0c             	sub    $0xc,%esp
 8049369:	68 c0 a1 04 08       	push   $0x804a1c0			//Congratulations! You've defused the bomb!
 804936e:	e8 4d f4 ff ff       	call   80487c0 <puts@plt>
 8049373:	83 c4 10             	add    $0x10,%esp
 8049376:	8b 44 24 5c          	mov    0x5c(%esp),%eax
 804937a:	65 33 05 14 00 00 00 	xor    %gs:0x14,%eax
 8049381:	74 05                	je     8049388 <phase_defused+0x9d>
 8049383:	e8 08 f4 ff ff       	call   8048790 <__stack_chk_fail@plt>
 8049388:	83 c4 6c             	add    $0x6c,%esp
 804938b:	c3                   	ret    

0804938c <sigalrm_handler>:
 804938c:	83 ec 0c             	sub    $0xc,%esp
 804938f:	6a 00                	push   $0x0
 8049391:	68 f0 a2 04 08       	push   $0x804a2f0
 8049396:	6a 01                	push   $0x1
 8049398:	ff 35 a0 c3 04 08    	pushl  0x804c3a0
 804939e:	e8 bd f4 ff ff       	call   8048860 <__fprintf_chk@plt>
 80493a3:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
 80493aa:	e8 31 f4 ff ff       	call   80487e0 <exit@plt>

080493af <rio_readlineb>:
 80493af:	55                   	push   %ebp
 80493b0:	57                   	push   %edi
 80493b1:	56                   	push   %esi
 80493b2:	53                   	push   %ebx
 80493b3:	83 ec 2c             	sub    $0x2c,%esp
 80493b6:	89 d7                	mov    %edx,%edi
 80493b8:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
 80493bc:	65 8b 15 14 00 00 00 	mov    %gs:0x14,%edx
 80493c3:	89 54 24 1c          	mov    %edx,0x1c(%esp)
 80493c7:	31 d2                	xor    %edx,%edx
 80493c9:	83 f9 01             	cmp    $0x1,%ecx
 80493cc:	76 79                	jbe    8049447 <rio_readlineb+0x98>
 80493ce:	89 c3                	mov    %eax,%ebx
 80493d0:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80493d4:	bd 01 00 00 00       	mov    $0x1,%ebp
 80493d9:	8d 73 0c             	lea    0xc(%ebx),%esi
 80493dc:	eb 2d                	jmp    804940b <rio_readlineb+0x5c>
 80493de:	83 ec 04             	sub    $0x4,%esp
 80493e1:	68 00 20 00 00       	push   $0x2000
 80493e6:	56                   	push   %esi
 80493e7:	ff 33                	pushl  (%ebx)
 80493e9:	e8 42 f3 ff ff       	call   8048730 <read@plt>
 80493ee:	89 43 04             	mov    %eax,0x4(%ebx)
 80493f1:	83 c4 10             	add    $0x10,%esp
 80493f4:	85 c0                	test   %eax,%eax
 80493f6:	79 0c                	jns    8049404 <rio_readlineb+0x55>
 80493f8:	e8 33 f4 ff ff       	call   8048830 <__errno_location@plt>
 80493fd:	83 38 04             	cmpl   $0x4,(%eax)
 8049400:	74 09                	je     804940b <rio_readlineb+0x5c>
 8049402:	eb 62                	jmp    8049466 <rio_readlineb+0xb7>
 8049404:	85 c0                	test   %eax,%eax
 8049406:	74 63                	je     804946b <rio_readlineb+0xbc>
 8049408:	89 73 08             	mov    %esi,0x8(%ebx)
 804940b:	8b 43 04             	mov    0x4(%ebx),%eax
 804940e:	85 c0                	test   %eax,%eax
 8049410:	7e cc                	jle    80493de <rio_readlineb+0x2f>
 8049412:	8b 4b 08             	mov    0x8(%ebx),%ecx
 8049415:	0f b6 11             	movzbl (%ecx),%edx
 8049418:	88 54 24 1b          	mov    %dl,0x1b(%esp)
 804941c:	83 c1 01             	add    $0x1,%ecx
 804941f:	89 4b 08             	mov    %ecx,0x8(%ebx)
 8049422:	83 e8 01             	sub    $0x1,%eax
 8049425:	89 43 04             	mov    %eax,0x4(%ebx)
 8049428:	83 c7 01             	add    $0x1,%edi
 804942b:	88 57 ff             	mov    %dl,-0x1(%edi)
 804942e:	80 fa 0a             	cmp    $0xa,%dl
 8049431:	75 09                	jne    804943c <rio_readlineb+0x8d>
 8049433:	eb 1d                	jmp    8049452 <rio_readlineb+0xa3>
 8049435:	83 fd 01             	cmp    $0x1,%ebp
 8049438:	75 18                	jne    8049452 <rio_readlineb+0xa3>
 804943a:	eb 1b                	jmp    8049457 <rio_readlineb+0xa8>
 804943c:	83 c5 01             	add    $0x1,%ebp
 804943f:	3b 6c 24 08          	cmp    0x8(%esp),%ebp
 8049443:	74 09                	je     804944e <rio_readlineb+0x9f>
 8049445:	eb c4                	jmp    804940b <rio_readlineb+0x5c>
 8049447:	bd 01 00 00 00       	mov    $0x1,%ebp
 804944c:	eb 04                	jmp    8049452 <rio_readlineb+0xa3>
 804944e:	8b 6c 24 0c          	mov    0xc(%esp),%ebp
 8049452:	c6 07 00             	movb   $0x0,(%edi)
 8049455:	89 e8                	mov    %ebp,%eax
 8049457:	8b 54 24 1c          	mov    0x1c(%esp),%edx
 804945b:	65 33 15 14 00 00 00 	xor    %gs:0x14,%edx
 8049462:	74 17                	je     804947b <rio_readlineb+0xcc>
 8049464:	eb 10                	jmp    8049476 <rio_readlineb+0xc7>
 8049466:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 804946b:	85 c0                	test   %eax,%eax
 804946d:	74 c6                	je     8049435 <rio_readlineb+0x86>
 804946f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 8049474:	eb e1                	jmp    8049457 <rio_readlineb+0xa8>
 8049476:	e8 15 f3 ff ff       	call   8048790 <__stack_chk_fail@plt>
 804947b:	83 c4 2c             	add    $0x2c,%esp
 804947e:	5b                   	pop    %ebx
 804947f:	5e                   	pop    %esi
 8049480:	5f                   	pop    %edi
 8049481:	5d                   	pop    %ebp
 8049482:	c3                   	ret    

08049483 <submitr>:
 8049483:	55                   	push   %ebp
 8049484:	57                   	push   %edi
 8049485:	56                   	push   %esi
 8049486:	53                   	push   %ebx
 8049487:	81 ec 60 a0 00 00    	sub    $0xa060,%esp
 804948d:	8b b4 24 74 a0 00 00 	mov    0xa074(%esp),%esi
 8049494:	8b 84 24 7c a0 00 00 	mov    0xa07c(%esp),%eax
 804949b:	89 44 24 10          	mov    %eax,0x10(%esp)
 804949f:	8b 84 24 80 a0 00 00 	mov    0xa080(%esp),%eax
 80494a6:	89 44 24 14          	mov    %eax,0x14(%esp)
 80494aa:	8b 84 24 84 a0 00 00 	mov    0xa084(%esp),%eax
 80494b1:	89 44 24 18          	mov    %eax,0x18(%esp)
 80494b5:	8b 9c 24 88 a0 00 00 	mov    0xa088(%esp),%ebx
 80494bc:	8b 84 24 8c a0 00 00 	mov    0xa08c(%esp),%eax
 80494c3:	89 44 24 1c          	mov    %eax,0x1c(%esp)
 80494c7:	65 a1 14 00 00 00    	mov    %gs:0x14,%eax
 80494cd:	89 84 24 50 a0 00 00 	mov    %eax,0xa050(%esp)
 80494d4:	31 c0                	xor    %eax,%eax
 80494d6:	c7 44 24 30 00 00 00 	movl   $0x0,0x30(%esp)
 80494dd:	00 
 80494de:	6a 00                	push   $0x0
 80494e0:	6a 01                	push   $0x1
 80494e2:	6a 02                	push   $0x2
 80494e4:	e8 67 f3 ff ff       	call   8048850 <socket@plt>
 80494e9:	89 44 24 18          	mov    %eax,0x18(%esp)
 80494ed:	83 c4 10             	add    $0x10,%esp
 80494f0:	85 c0                	test   %eax,%eax
 80494f2:	79 52                	jns    8049546 <submitr+0xc3>
 80494f4:	8b 44 24 18          	mov    0x18(%esp),%eax
 80494f8:	c7 00 45 72 72 6f    	movl   $0x6f727245,(%eax)
 80494fe:	c7 40 04 72 3a 20 43 	movl   $0x43203a72,0x4(%eax)
 8049505:	c7 40 08 6c 69 65 6e 	movl   $0x6e65696c,0x8(%eax)
 804950c:	c7 40 0c 74 20 75 6e 	movl   $0x6e752074,0xc(%eax)
 8049513:	c7 40 10 61 62 6c 65 	movl   $0x656c6261,0x10(%eax)
 804951a:	c7 40 14 20 74 6f 20 	movl   $0x206f7420,0x14(%eax)
 8049521:	c7 40 18 63 72 65 61 	movl   $0x61657263,0x18(%eax)
 8049528:	c7 40 1c 74 65 20 73 	movl   $0x73206574,0x1c(%eax)
 804952f:	c7 40 20 6f 63 6b 65 	movl   $0x656b636f,0x20(%eax)
 8049536:	66 c7 40 24 74 00    	movw   $0x74,0x24(%eax)
 804953c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 8049541:	e9 3f 06 00 00       	jmp    8049b85 <submitr+0x702>
 8049546:	83 ec 0c             	sub    $0xc,%esp
 8049549:	56                   	push   %esi
 804954a:	e8 21 f3 ff ff       	call   8048870 <gethostbyname@plt>
 804954f:	83 c4 10             	add    $0x10,%esp
 8049552:	85 c0                	test   %eax,%eax
 8049554:	75 73                	jne    80495c9 <submitr+0x146>
 8049556:	8b 44 24 18          	mov    0x18(%esp),%eax
 804955a:	c7 00 45 72 72 6f    	movl   $0x6f727245,(%eax)
 8049560:	c7 40 04 72 3a 20 44 	movl   $0x44203a72,0x4(%eax)
 8049567:	c7 40 08 4e 53 20 69 	movl   $0x6920534e,0x8(%eax)
 804956e:	c7 40 0c 73 20 75 6e 	movl   $0x6e752073,0xc(%eax)
 8049575:	c7 40 10 61 62 6c 65 	movl   $0x656c6261,0x10(%eax)
 804957c:	c7 40 14 20 74 6f 20 	movl   $0x206f7420,0x14(%eax)
 8049583:	c7 40 18 72 65 73 6f 	movl   $0x6f736572,0x18(%eax)
 804958a:	c7 40 1c 6c 76 65 20 	movl   $0x2065766c,0x1c(%eax)
 8049591:	c7 40 20 73 65 72 76 	movl   $0x76726573,0x20(%eax)
 8049598:	c7 40 24 65 72 20 61 	movl   $0x61207265,0x24(%eax)
 804959f:	c7 40 28 64 64 72 65 	movl   $0x65726464,0x28(%eax)
 80495a6:	66 c7 40 2c 73 73    	movw   $0x7373,0x2c(%eax)
 80495ac:	c6 40 2e 00          	movb   $0x0,0x2e(%eax)
 80495b0:	83 ec 0c             	sub    $0xc,%esp
 80495b3:	ff 74 24 14          	pushl  0x14(%esp)
 80495b7:	e8 e4 f2 ff ff       	call   80488a0 <close@plt>
 80495bc:	83 c4 10             	add    $0x10,%esp
 80495bf:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 80495c4:	e9 bc 05 00 00       	jmp    8049b85 <submitr+0x702>
 80495c9:	8d 74 24 30          	lea    0x30(%esp),%esi
 80495cd:	c7 44 24 30 00 00 00 	movl   $0x0,0x30(%esp)
 80495d4:	00 
 80495d5:	c7 44 24 34 00 00 00 	movl   $0x0,0x34(%esp)
 80495dc:	00 
 80495dd:	c7 44 24 38 00 00 00 	movl   $0x0,0x38(%esp)
 80495e4:	00 
 80495e5:	c7 44 24 3c 00 00 00 	movl   $0x0,0x3c(%esp)
 80495ec:	00 
 80495ed:	66 c7 44 24 30 02 00 	movw   $0x2,0x30(%esp)
 80495f4:	6a 0c                	push   $0xc
 80495f6:	ff 70 0c             	pushl  0xc(%eax)
 80495f9:	8b 40 10             	mov    0x10(%eax),%eax
 80495fc:	ff 30                	pushl  (%eax)
 80495fe:	8d 44 24 40          	lea    0x40(%esp),%eax
 8049602:	50                   	push   %eax
 8049603:	e8 c8 f1 ff ff       	call   80487d0 <__memmove_chk@plt>
 8049608:	0f b7 84 24 84 a0 00 	movzwl 0xa084(%esp),%eax
 804960f:	00 
 8049610:	66 c1 c8 08          	ror    $0x8,%ax
 8049614:	66 89 44 24 42       	mov    %ax,0x42(%esp)
 8049619:	83 c4 0c             	add    $0xc,%esp
 804961c:	6a 10                	push   $0x10
 804961e:	56                   	push   %esi
 804961f:	ff 74 24 14          	pushl  0x14(%esp)
 8049623:	e8 68 f2 ff ff       	call   8048890 <connect@plt>
 8049628:	83 c4 10             	add    $0x10,%esp
 804962b:	85 c0                	test   %eax,%eax
 804962d:	79 65                	jns    8049694 <submitr+0x211>
 804962f:	8b 44 24 18          	mov    0x18(%esp),%eax
 8049633:	c7 00 45 72 72 6f    	movl   $0x6f727245,(%eax)
 8049639:	c7 40 04 72 3a 20 55 	movl   $0x55203a72,0x4(%eax)
 8049640:	c7 40 08 6e 61 62 6c 	movl   $0x6c62616e,0x8(%eax)
 8049647:	c7 40 0c 65 20 74 6f 	movl   $0x6f742065,0xc(%eax)
 804964e:	c7 40 10 20 63 6f 6e 	movl   $0x6e6f6320,0x10(%eax)
 8049655:	c7 40 14 6e 65 63 74 	movl   $0x7463656e,0x14(%eax)
 804965c:	c7 40 18 20 74 6f 20 	movl   $0x206f7420,0x18(%eax)
 8049663:	c7 40 1c 74 68 65 20 	movl   $0x20656874,0x1c(%eax)
 804966a:	c7 40 20 73 65 72 76 	movl   $0x76726573,0x20(%eax)
 8049671:	66 c7 40 24 65 72    	movw   $0x7265,0x24(%eax)
 8049677:	c6 40 26 00          	movb   $0x0,0x26(%eax)
 804967b:	83 ec 0c             	sub    $0xc,%esp
 804967e:	ff 74 24 14          	pushl  0x14(%esp)
 8049682:	e8 19 f2 ff ff       	call   80488a0 <close@plt>
 8049687:	83 c4 10             	add    $0x10,%esp
 804968a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 804968f:	e9 f1 04 00 00       	jmp    8049b85 <submitr+0x702>
 8049694:	be ff ff ff ff       	mov    $0xffffffff,%esi
 8049699:	b8 00 00 00 00       	mov    $0x0,%eax
 804969e:	89 f1                	mov    %esi,%ecx
 80496a0:	89 df                	mov    %ebx,%edi
 80496a2:	f2 ae                	repnz scas %es:(%edi),%al
 80496a4:	f7 d1                	not    %ecx
 80496a6:	89 cd                	mov    %ecx,%ebp
 80496a8:	89 f1                	mov    %esi,%ecx
 80496aa:	8b 7c 24 0c          	mov    0xc(%esp),%edi
 80496ae:	f2 ae                	repnz scas %es:(%edi),%al
 80496b0:	89 4c 24 1c          	mov    %ecx,0x1c(%esp)
 80496b4:	89 f1                	mov    %esi,%ecx
 80496b6:	8b 7c 24 10          	mov    0x10(%esp),%edi
 80496ba:	f2 ae                	repnz scas %es:(%edi),%al
 80496bc:	89 ca                	mov    %ecx,%edx
 80496be:	f7 d2                	not    %edx
 80496c0:	89 f1                	mov    %esi,%ecx
 80496c2:	8b 7c 24 14          	mov    0x14(%esp),%edi
 80496c6:	f2 ae                	repnz scas %es:(%edi),%al
 80496c8:	2b 54 24 1c          	sub    0x1c(%esp),%edx
 80496cc:	29 ca                	sub    %ecx,%edx
 80496ce:	8d 44 6d fd          	lea    -0x3(%ebp,%ebp,2),%eax
 80496d2:	8d 44 02 7b          	lea    0x7b(%edx,%eax,1),%eax
 80496d6:	3d 00 20 00 00       	cmp    $0x2000,%eax
 80496db:	76 7e                	jbe    804975b <submitr+0x2d8>
 80496dd:	8b 44 24 18          	mov    0x18(%esp),%eax
 80496e1:	c7 00 45 72 72 6f    	movl   $0x6f727245,(%eax)
 80496e7:	c7 40 04 72 3a 20 52 	movl   $0x52203a72,0x4(%eax)
 80496ee:	c7 40 08 65 73 75 6c 	movl   $0x6c757365,0x8(%eax)
 80496f5:	c7 40 0c 74 20 73 74 	movl   $0x74732074,0xc(%eax)
 80496fc:	c7 40 10 72 69 6e 67 	movl   $0x676e6972,0x10(%eax)
 8049703:	c7 40 14 20 74 6f 6f 	movl   $0x6f6f7420,0x14(%eax)
 804970a:	c7 40 18 20 6c 61 72 	movl   $0x72616c20,0x18(%eax)
 8049711:	c7 40 1c 67 65 2e 20 	movl   $0x202e6567,0x1c(%eax)
 8049718:	c7 40 20 49 6e 63 72 	movl   $0x72636e49,0x20(%eax)
 804971f:	c7 40 24 65 61 73 65 	movl   $0x65736165,0x24(%eax)
 8049726:	c7 40 28 20 53 55 42 	movl   $0x42555320,0x28(%eax)
 804972d:	c7 40 2c 4d 49 54 52 	movl   $0x5254494d,0x2c(%eax)
 8049734:	c7 40 30 5f 4d 41 58 	movl   $0x58414d5f,0x30(%eax)
 804973b:	c7 40 34 42 55 46 00 	movl   $0x465542,0x34(%eax)
 8049742:	83 ec 0c             	sub    $0xc,%esp
 8049745:	ff 74 24 14          	pushl  0x14(%esp)
 8049749:	e8 52 f1 ff ff       	call   80488a0 <close@plt>
 804974e:	83 c4 10             	add    $0x10,%esp
 8049751:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 8049756:	e9 2a 04 00 00       	jmp    8049b85 <submitr+0x702>
 804975b:	8d 94 24 4c 40 00 00 	lea    0x404c(%esp),%edx
 8049762:	b9 00 08 00 00       	mov    $0x800,%ecx
 8049767:	b8 00 00 00 00       	mov    $0x0,%eax
 804976c:	89 d7                	mov    %edx,%edi
 804976e:	f3 ab                	rep stos %eax,%es:(%edi)
 8049770:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
 8049775:	89 df                	mov    %ebx,%edi
 8049777:	f2 ae                	repnz scas %es:(%edi),%al
 8049779:	f7 d1                	not    %ecx
 804977b:	89 ce                	mov    %ecx,%esi
 804977d:	83 ee 01             	sub    $0x1,%esi
 8049780:	0f 84 5c 04 00 00    	je     8049be2 <submitr+0x75f>
 8049786:	89 d5                	mov    %edx,%ebp
 8049788:	bf d9 ff 00 00       	mov    $0xffd9,%edi
 804978d:	0f b6 13             	movzbl (%ebx),%edx
 8049790:	8d 4a d6             	lea    -0x2a(%edx),%ecx
 8049793:	b8 01 00 00 00       	mov    $0x1,%eax
 8049798:	80 f9 0f             	cmp    $0xf,%cl
 804979b:	77 0a                	ja     80497a7 <submitr+0x324>
 804979d:	89 f8                	mov    %edi,%eax
 804979f:	d3 e8                	shr    %cl,%eax
 80497a1:	83 f0 01             	xor    $0x1,%eax
 80497a4:	83 e0 01             	and    $0x1,%eax
 80497a7:	80 fa 5f             	cmp    $0x5f,%dl
 80497aa:	0f 94 c1             	sete   %cl
 80497ad:	38 c1                	cmp    %al,%cl
 80497af:	73 0c                	jae    80497bd <submitr+0x33a>
 80497b1:	89 d0                	mov    %edx,%eax
 80497b3:	83 e0 df             	and    $0xffffffdf,%eax
 80497b6:	83 e8 41             	sub    $0x41,%eax
 80497b9:	3c 19                	cmp    $0x19,%al
 80497bb:	77 08                	ja     80497c5 <submitr+0x342>
 80497bd:	88 55 00             	mov    %dl,0x0(%ebp)
 80497c0:	8d 6d 01             	lea    0x1(%ebp),%ebp
 80497c3:	eb 62                	jmp    8049827 <submitr+0x3a4>
 80497c5:	80 fa 20             	cmp    $0x20,%dl
 80497c8:	75 09                	jne    80497d3 <submitr+0x350>
 80497ca:	c6 45 00 2b          	movb   $0x2b,0x0(%ebp)
 80497ce:	8d 6d 01             	lea    0x1(%ebp),%ebp
 80497d1:	eb 54                	jmp    8049827 <submitr+0x3a4>
 80497d3:	8d 42 e0             	lea    -0x20(%edx),%eax
 80497d6:	3c 5f                	cmp    $0x5f,%al
 80497d8:	76 09                	jbe    80497e3 <submitr+0x360>
 80497da:	80 fa 09             	cmp    $0x9,%dl
 80497dd:	0f 85 bb 03 00 00    	jne    8049b9e <submitr+0x71b>
 80497e3:	83 ec 0c             	sub    $0xc,%esp
 80497e6:	0f b6 d2             	movzbl %dl,%edx
 80497e9:	52                   	push   %edx
 80497ea:	68 fc a3 04 08       	push   $0x804a3fc
 80497ef:	6a 08                	push   $0x8
 80497f1:	6a 01                	push   $0x1
 80497f3:	8d 84 24 68 80 00 00 	lea    0x8068(%esp),%eax
 80497fa:	50                   	push   %eax
 80497fb:	e8 c0 f0 ff ff       	call   80488c0 <__sprintf_chk@plt>
 8049800:	0f b6 84 24 6c 80 00 	movzbl 0x806c(%esp),%eax
 8049807:	00 
 8049808:	88 45 00             	mov    %al,0x0(%ebp)
 804980b:	0f b6 84 24 6d 80 00 	movzbl 0x806d(%esp),%eax
 8049812:	00 
 8049813:	88 45 01             	mov    %al,0x1(%ebp)
 8049816:	0f b6 84 24 6e 80 00 	movzbl 0x806e(%esp),%eax
 804981d:	00 
 804981e:	88 45 02             	mov    %al,0x2(%ebp)
 8049821:	83 c4 20             	add    $0x20,%esp
 8049824:	8d 6d 03             	lea    0x3(%ebp),%ebp
 8049827:	83 c3 01             	add    $0x1,%ebx
 804982a:	83 ee 01             	sub    $0x1,%esi
 804982d:	0f 85 5a ff ff ff    	jne    804978d <submitr+0x30a>
 8049833:	e9 aa 03 00 00       	jmp    8049be2 <submitr+0x75f>
 8049838:	83 ec 04             	sub    $0x4,%esp
 804983b:	53                   	push   %ebx
 804983c:	56                   	push   %esi
 804983d:	55                   	push   %ebp
 804983e:	e8 bd ef ff ff       	call   8048800 <write@plt>
 8049843:	83 c4 10             	add    $0x10,%esp
 8049846:	85 c0                	test   %eax,%eax
 8049848:	7f 0f                	jg     8049859 <submitr+0x3d6>
 804984a:	e8 e1 ef ff ff       	call   8048830 <__errno_location@plt>
 804984f:	83 38 04             	cmpl   $0x4,(%eax)
 8049852:	75 0f                	jne    8049863 <submitr+0x3e0>
 8049854:	b8 00 00 00 00       	mov    $0x0,%eax
 8049859:	01 c6                	add    %eax,%esi
 804985b:	29 c3                	sub    %eax,%ebx
 804985d:	75 d9                	jne    8049838 <submitr+0x3b5>
 804985f:	85 ff                	test   %edi,%edi
 8049861:	79 69                	jns    80498cc <submitr+0x449>
 8049863:	8b 44 24 18          	mov    0x18(%esp),%eax
 8049867:	c7 00 45 72 72 6f    	movl   $0x6f727245,(%eax)
 804986d:	c7 40 04 72 3a 20 43 	movl   $0x43203a72,0x4(%eax)
 8049874:	c7 40 08 6c 69 65 6e 	movl   $0x6e65696c,0x8(%eax)
 804987b:	c7 40 0c 74 20 75 6e 	movl   $0x6e752074,0xc(%eax)
 8049882:	c7 40 10 61 62 6c 65 	movl   $0x656c6261,0x10(%eax)
 8049889:	c7 40 14 20 74 6f 20 	movl   $0x206f7420,0x14(%eax)
 8049890:	c7 40 18 77 72 69 74 	movl   $0x74697277,0x18(%eax)
 8049897:	c7 40 1c 65 20 74 6f 	movl   $0x6f742065,0x1c(%eax)
 804989e:	c7 40 20 20 74 68 65 	movl   $0x65687420,0x20(%eax)
 80498a5:	c7 40 24 20 73 65 72 	movl   $0x72657320,0x24(%eax)
 80498ac:	c7 40 28 76 65 72 00 	movl   $0x726576,0x28(%eax)
 80498b3:	83 ec 0c             	sub    $0xc,%esp
 80498b6:	ff 74 24 14          	pushl  0x14(%esp)
 80498ba:	e8 e1 ef ff ff       	call   80488a0 <close@plt>
 80498bf:	83 c4 10             	add    $0x10,%esp
 80498c2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 80498c7:	e9 b9 02 00 00       	jmp    8049b85 <submitr+0x702>
 80498cc:	8b 44 24 08          	mov    0x8(%esp),%eax
 80498d0:	89 44 24 40          	mov    %eax,0x40(%esp)
 80498d4:	c7 44 24 44 00 00 00 	movl   $0x0,0x44(%esp)
 80498db:	00 
 80498dc:	8d 44 24 4c          	lea    0x4c(%esp),%eax
 80498e0:	89 44 24 48          	mov    %eax,0x48(%esp)
 80498e4:	b9 00 20 00 00       	mov    $0x2000,%ecx
 80498e9:	8d 94 24 4c 20 00 00 	lea    0x204c(%esp),%edx
 80498f0:	8d 44 24 40          	lea    0x40(%esp),%eax
 80498f4:	e8 b6 fa ff ff       	call   80493af <rio_readlineb>
 80498f9:	85 c0                	test   %eax,%eax
 80498fb:	7f 7d                	jg     804997a <submitr+0x4f7>
 80498fd:	8b 44 24 18          	mov    0x18(%esp),%eax
 8049901:	c7 00 45 72 72 6f    	movl   $0x6f727245,(%eax)
 8049907:	c7 40 04 72 3a 20 43 	movl   $0x43203a72,0x4(%eax)
 804990e:	c7 40 08 6c 69 65 6e 	movl   $0x6e65696c,0x8(%eax)
 8049915:	c7 40 0c 74 20 75 6e 	movl   $0x6e752074,0xc(%eax)
 804991c:	c7 40 10 61 62 6c 65 	movl   $0x656c6261,0x10(%eax)
 8049923:	c7 40 14 20 74 6f 20 	movl   $0x206f7420,0x14(%eax)
 804992a:	c7 40 18 72 65 61 64 	movl   $0x64616572,0x18(%eax)
 8049931:	c7 40 1c 20 66 69 72 	movl   $0x72696620,0x1c(%eax)
 8049938:	c7 40 20 73 74 20 68 	movl   $0x68207473,0x20(%eax)
 804993f:	c7 40 24 65 61 64 65 	movl   $0x65646165,0x24(%eax)
 8049946:	c7 40 28 72 20 66 72 	movl   $0x72662072,0x28(%eax)
 804994d:	c7 40 2c 6f 6d 20 73 	movl   $0x73206d6f,0x2c(%eax)
 8049954:	c7 40 30 65 72 76 65 	movl   $0x65767265,0x30(%eax)
 804995b:	66 c7 40 34 72 00    	movw   $0x72,0x34(%eax)
 8049961:	83 ec 0c             	sub    $0xc,%esp
 8049964:	ff 74 24 14          	pushl  0x14(%esp)
 8049968:	e8 33 ef ff ff       	call   80488a0 <close@plt>
 804996d:	83 c4 10             	add    $0x10,%esp
 8049970:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 8049975:	e9 0b 02 00 00       	jmp    8049b85 <submitr+0x702>
 804997a:	83 ec 0c             	sub    $0xc,%esp
 804997d:	8d 84 24 58 80 00 00 	lea    0x8058(%esp),%eax
 8049984:	50                   	push   %eax
 8049985:	8d 44 24 3c          	lea    0x3c(%esp),%eax
 8049989:	50                   	push   %eax
 804998a:	8d 84 24 60 60 00 00 	lea    0x6060(%esp),%eax
 8049991:	50                   	push   %eax
 8049992:	68 03 a4 04 08       	push   $0x804a403
 8049997:	8d 84 24 68 20 00 00 	lea    0x2068(%esp),%eax
 804999e:	50                   	push   %eax
 804999f:	e8 6c ee ff ff       	call   8048810 <__isoc99_sscanf@plt>
 80499a4:	8b 44 24 4c          	mov    0x4c(%esp),%eax
 80499a8:	83 c4 20             	add    $0x20,%esp
 80499ab:	3d c8 00 00 00       	cmp    $0xc8,%eax
 80499b0:	0f 84 c4 00 00 00    	je     8049a7a <submitr+0x5f7>
 80499b6:	83 ec 08             	sub    $0x8,%esp
 80499b9:	8d 94 24 54 80 00 00 	lea    0x8054(%esp),%edx
 80499c0:	52                   	push   %edx
 80499c1:	50                   	push   %eax
 80499c2:	68 14 a3 04 08       	push   $0x804a314
 80499c7:	6a ff                	push   $0xffffffff
 80499c9:	6a 01                	push   $0x1
 80499cb:	ff 74 24 34          	pushl  0x34(%esp)
 80499cf:	e8 ec ee ff ff       	call   80488c0 <__sprintf_chk@plt>
 80499d4:	83 c4 14             	add    $0x14,%esp
 80499d7:	ff 74 24 14          	pushl  0x14(%esp)
 80499db:	e8 c0 ee ff ff       	call   80488a0 <close@plt>
 80499e0:	83 c4 10             	add    $0x10,%esp
 80499e3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 80499e8:	e9 98 01 00 00       	jmp    8049b85 <submitr+0x702>
 80499ed:	b9 00 20 00 00       	mov    $0x2000,%ecx
 80499f2:	8d 94 24 4c 20 00 00 	lea    0x204c(%esp),%edx
 80499f9:	8d 44 24 40          	lea    0x40(%esp),%eax
 80499fd:	e8 ad f9 ff ff       	call   80493af <rio_readlineb>
 8049a02:	85 c0                	test   %eax,%eax
 8049a04:	7f 74                	jg     8049a7a <submitr+0x5f7>
 8049a06:	8b 44 24 18          	mov    0x18(%esp),%eax
 8049a0a:	c7 00 45 72 72 6f    	movl   $0x6f727245,(%eax)
 8049a10:	c7 40 04 72 3a 20 43 	movl   $0x43203a72,0x4(%eax)
 8049a17:	c7 40 08 6c 69 65 6e 	movl   $0x6e65696c,0x8(%eax)
 8049a1e:	c7 40 0c 74 20 75 6e 	movl   $0x6e752074,0xc(%eax)
 8049a25:	c7 40 10 61 62 6c 65 	movl   $0x656c6261,0x10(%eax)
 8049a2c:	c7 40 14 20 74 6f 20 	movl   $0x206f7420,0x14(%eax)
 8049a33:	c7 40 18 72 65 61 64 	movl   $0x64616572,0x18(%eax)
 8049a3a:	c7 40 1c 20 68 65 61 	movl   $0x61656820,0x1c(%eax)
 8049a41:	c7 40 20 64 65 72 73 	movl   $0x73726564,0x20(%eax)
 8049a48:	c7 40 24 20 66 72 6f 	movl   $0x6f726620,0x24(%eax)
 8049a4f:	c7 40 28 6d 20 73 65 	movl   $0x6573206d,0x28(%eax)
 8049a56:	c7 40 2c 72 76 65 72 	movl   $0x72657672,0x2c(%eax)
 8049a5d:	c6 40 30 00          	movb   $0x0,0x30(%eax)
 8049a61:	83 ec 0c             	sub    $0xc,%esp
 8049a64:	ff 74 24 14          	pushl  0x14(%esp)
 8049a68:	e8 33 ee ff ff       	call   80488a0 <close@plt>
 8049a6d:	83 c4 10             	add    $0x10,%esp
 8049a70:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 8049a75:	e9 0b 01 00 00       	jmp    8049b85 <submitr+0x702>
 8049a7a:	80 bc 24 4c 20 00 00 	cmpb   $0xd,0x204c(%esp)
 8049a81:	0d 
 8049a82:	0f 85 65 ff ff ff    	jne    80499ed <submitr+0x56a>
 8049a88:	80 bc 24 4d 20 00 00 	cmpb   $0xa,0x204d(%esp)
 8049a8f:	0a 
 8049a90:	0f 85 57 ff ff ff    	jne    80499ed <submitr+0x56a>
 8049a96:	80 bc 24 4e 20 00 00 	cmpb   $0x0,0x204e(%esp)
 8049a9d:	00 
 8049a9e:	0f 85 49 ff ff ff    	jne    80499ed <submitr+0x56a>
 8049aa4:	b9 00 20 00 00       	mov    $0x2000,%ecx
 8049aa9:	8d 94 24 4c 20 00 00 	lea    0x204c(%esp),%edx
 8049ab0:	8d 44 24 40          	lea    0x40(%esp),%eax
 8049ab4:	e8 f6 f8 ff ff       	call   80493af <rio_readlineb>
 8049ab9:	85 c0                	test   %eax,%eax
 8049abb:	7f 7b                	jg     8049b38 <submitr+0x6b5>
 8049abd:	8b 44 24 18          	mov    0x18(%esp),%eax
 8049ac1:	c7 00 45 72 72 6f    	movl   $0x6f727245,(%eax)
 8049ac7:	c7 40 04 72 3a 20 43 	movl   $0x43203a72,0x4(%eax)
 8049ace:	c7 40 08 6c 69 65 6e 	movl   $0x6e65696c,0x8(%eax)
 8049ad5:	c7 40 0c 74 20 75 6e 	movl   $0x6e752074,0xc(%eax)
 8049adc:	c7 40 10 61 62 6c 65 	movl   $0x656c6261,0x10(%eax)
 8049ae3:	c7 40 14 20 74 6f 20 	movl   $0x206f7420,0x14(%eax)
 8049aea:	c7 40 18 72 65 61 64 	movl   $0x64616572,0x18(%eax)
 8049af1:	c7 40 1c 20 73 74 61 	movl   $0x61747320,0x1c(%eax)
 8049af8:	c7 40 20 74 75 73 20 	movl   $0x20737574,0x20(%eax)
 8049aff:	c7 40 24 6d 65 73 73 	movl   $0x7373656d,0x24(%eax)
 8049b06:	c7 40 28 61 67 65 20 	movl   $0x20656761,0x28(%eax)
 8049b0d:	c7 40 2c 66 72 6f 6d 	movl   $0x6d6f7266,0x2c(%eax)
 8049b14:	c7 40 30 20 73 65 72 	movl   $0x72657320,0x30(%eax)
 8049b1b:	c7 40 34 76 65 72 00 	movl   $0x726576,0x34(%eax)
 8049b22:	83 ec 0c             	sub    $0xc,%esp
 8049b25:	ff 74 24 14          	pushl  0x14(%esp)
 8049b29:	e8 72 ed ff ff       	call   80488a0 <close@plt>
 8049b2e:	83 c4 10             	add    $0x10,%esp
 8049b31:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 8049b36:	eb 4d                	jmp    8049b85 <submitr+0x702>
 8049b38:	83 ec 08             	sub    $0x8,%esp
 8049b3b:	8d 84 24 54 20 00 00 	lea    0x2054(%esp),%eax
 8049b42:	50                   	push   %eax
 8049b43:	8b 7c 24 24          	mov    0x24(%esp),%edi
 8049b47:	57                   	push   %edi
 8049b48:	e8 53 ec ff ff       	call   80487a0 <strcpy@plt>
 8049b4d:	83 c4 04             	add    $0x4,%esp
 8049b50:	ff 74 24 14          	pushl  0x14(%esp)
 8049b54:	e8 47 ed ff ff       	call   80488a0 <close@plt>
 8049b59:	0f b6 17             	movzbl (%edi),%edx
 8049b5c:	b8 4f 00 00 00       	mov    $0x4f,%eax
 8049b61:	83 c4 10             	add    $0x10,%esp
 8049b64:	29 d0                	sub    %edx,%eax
 8049b66:	75 13                	jne    8049b7b <submitr+0x6f8>
 8049b68:	0f b6 57 01          	movzbl 0x1(%edi),%edx
 8049b6c:	b8 4b 00 00 00       	mov    $0x4b,%eax
 8049b71:	29 d0                	sub    %edx,%eax
 8049b73:	75 06                	jne    8049b7b <submitr+0x6f8>
 8049b75:	0f b6 47 02          	movzbl 0x2(%edi),%eax
 8049b79:	f7 d8                	neg    %eax
 8049b7b:	85 c0                	test   %eax,%eax
 8049b7d:	0f 95 c0             	setne  %al
 8049b80:	0f b6 c0             	movzbl %al,%eax
 8049b83:	f7 d8                	neg    %eax
 8049b85:	8b bc 24 4c a0 00 00 	mov    0xa04c(%esp),%edi
 8049b8c:	65 33 3d 14 00 00 00 	xor    %gs:0x14,%edi
 8049b93:	0f 84 a9 00 00 00    	je     8049c42 <submitr+0x7bf>
 8049b99:	e9 9f 00 00 00       	jmp    8049c3d <submitr+0x7ba>
 8049b9e:	a1 44 a3 04 08       	mov    0x804a344,%eax
 8049ba3:	8b 7c 24 18          	mov    0x18(%esp),%edi
 8049ba7:	89 07                	mov    %eax,(%edi)
 8049ba9:	a1 83 a3 04 08       	mov    0x804a383,%eax
 8049bae:	89 47 3f             	mov    %eax,0x3f(%edi)
 8049bb1:	89 f8                	mov    %edi,%eax
 8049bb3:	83 c7 04             	add    $0x4,%edi
 8049bb6:	83 e7 fc             	and    $0xfffffffc,%edi
 8049bb9:	29 f8                	sub    %edi,%eax
 8049bbb:	be 44 a3 04 08       	mov    $0x804a344,%esi
 8049bc0:	29 c6                	sub    %eax,%esi
 8049bc2:	83 c0 43             	add    $0x43,%eax
 8049bc5:	c1 e8 02             	shr    $0x2,%eax
 8049bc8:	89 c1                	mov    %eax,%ecx
 8049bca:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
 8049bcc:	83 ec 0c             	sub    $0xc,%esp
 8049bcf:	ff 74 24 14          	pushl  0x14(%esp)
 8049bd3:	e8 c8 ec ff ff       	call   80488a0 <close@plt>
 8049bd8:	83 c4 10             	add    $0x10,%esp
 8049bdb:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 8049be0:	eb a3                	jmp    8049b85 <submitr+0x702>
 8049be2:	8d 84 24 4c 40 00 00 	lea    0x404c(%esp),%eax
 8049be9:	50                   	push   %eax
 8049bea:	ff 74 24 18          	pushl  0x18(%esp)
 8049bee:	ff 74 24 18          	pushl  0x18(%esp)
 8049bf2:	ff 74 24 18          	pushl  0x18(%esp)
 8049bf6:	68 88 a3 04 08       	push   $0x804a388
 8049bfb:	68 00 20 00 00       	push   $0x2000
 8049c00:	6a 01                	push   $0x1
 8049c02:	8d bc 24 68 20 00 00 	lea    0x2068(%esp),%edi
 8049c09:	57                   	push   %edi
 8049c0a:	e8 b1 ec ff ff       	call   80488c0 <__sprintf_chk@plt>
 8049c0f:	b8 00 00 00 00       	mov    $0x0,%eax
 8049c14:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
 8049c19:	f2 ae                	repnz scas %es:(%edi),%al
 8049c1b:	f7 d1                	not    %ecx
 8049c1d:	8d 79 ff             	lea    -0x1(%ecx),%edi
 8049c20:	83 c4 20             	add    $0x20,%esp
 8049c23:	89 fb                	mov    %edi,%ebx
 8049c25:	8d b4 24 4c 20 00 00 	lea    0x204c(%esp),%esi
 8049c2c:	8b 6c 24 08          	mov    0x8(%esp),%ebp
 8049c30:	85 ff                	test   %edi,%edi
 8049c32:	0f 85 00 fc ff ff    	jne    8049838 <submitr+0x3b5>
 8049c38:	e9 8f fc ff ff       	jmp    80498cc <submitr+0x449>
 8049c3d:	e8 4e eb ff ff       	call   8048790 <__stack_chk_fail@plt>
 8049c42:	81 c4 5c a0 00 00    	add    $0xa05c,%esp
 8049c48:	5b                   	pop    %ebx
 8049c49:	5e                   	pop    %esi
 8049c4a:	5f                   	pop    %edi
 8049c4b:	5d                   	pop    %ebp
 8049c4c:	c3                   	ret    

08049c4d <init_timeout>:
 8049c4d:	53                   	push   %ebx
 8049c4e:	83 ec 08             	sub    $0x8,%esp
 8049c51:	8b 5c 24 10          	mov    0x10(%esp),%ebx
 8049c55:	85 db                	test   %ebx,%ebx
 8049c57:	74 24                	je     8049c7d <init_timeout+0x30>
 8049c59:	83 ec 08             	sub    $0x8,%esp
 8049c5c:	68 8c 93 04 08       	push   $0x804938c
 8049c61:	6a 0e                	push   $0xe
 8049c63:	e8 f8 ea ff ff       	call   8048760 <signal@plt>
 8049c68:	85 db                	test   %ebx,%ebx
 8049c6a:	b8 00 00 00 00       	mov    $0x0,%eax
 8049c6f:	0f 48 d8             	cmovs  %eax,%ebx
 8049c72:	89 1c 24             	mov    %ebx,(%esp)
 8049c75:	e8 06 eb ff ff       	call   8048780 <alarm@plt>
 8049c7a:	83 c4 10             	add    $0x10,%esp
 8049c7d:	83 c4 08             	add    $0x8,%esp
 8049c80:	5b                   	pop    %ebx
 8049c81:	c3                   	ret    

08049c82 <init_driver>:
 8049c82:	57                   	push   %edi
 8049c83:	56                   	push   %esi
 8049c84:	53                   	push   %ebx
 8049c85:	83 ec 28             	sub    $0x28,%esp
 8049c88:	8b 74 24 38          	mov    0x38(%esp),%esi
 8049c8c:	65 a1 14 00 00 00    	mov    %gs:0x14,%eax
 8049c92:	89 44 24 24          	mov    %eax,0x24(%esp)
 8049c96:	31 c0                	xor    %eax,%eax
 8049c98:	6a 01                	push   $0x1
 8049c9a:	6a 0d                	push   $0xd
 8049c9c:	e8 bf ea ff ff       	call   8048760 <signal@plt>
 8049ca1:	83 c4 08             	add    $0x8,%esp
 8049ca4:	6a 01                	push   $0x1
 8049ca6:	6a 1d                	push   $0x1d
 8049ca8:	e8 b3 ea ff ff       	call   8048760 <signal@plt>
 8049cad:	83 c4 08             	add    $0x8,%esp
 8049cb0:	6a 01                	push   $0x1
 8049cb2:	6a 1d                	push   $0x1d
 8049cb4:	e8 a7 ea ff ff       	call   8048760 <signal@plt>
 8049cb9:	83 c4 0c             	add    $0xc,%esp
 8049cbc:	6a 00                	push   $0x0
 8049cbe:	6a 01                	push   $0x1
 8049cc0:	6a 02                	push   $0x2
 8049cc2:	e8 89 eb ff ff       	call   8048850 <socket@plt>
 8049cc7:	83 c4 10             	add    $0x10,%esp
 8049cca:	85 c0                	test   %eax,%eax
 8049ccc:	79 4e                	jns    8049d1c <init_driver+0x9a>
 8049cce:	c7 06 45 72 72 6f    	movl   $0x6f727245,(%esi)
 8049cd4:	c7 46 04 72 3a 20 43 	movl   $0x43203a72,0x4(%esi)
 8049cdb:	c7 46 08 6c 69 65 6e 	movl   $0x6e65696c,0x8(%esi)
 8049ce2:	c7 46 0c 74 20 75 6e 	movl   $0x6e752074,0xc(%esi)
 8049ce9:	c7 46 10 61 62 6c 65 	movl   $0x656c6261,0x10(%esi)
 8049cf0:	c7 46 14 20 74 6f 20 	movl   $0x206f7420,0x14(%esi)
 8049cf7:	c7 46 18 63 72 65 61 	movl   $0x61657263,0x18(%esi)
 8049cfe:	c7 46 1c 74 65 20 73 	movl   $0x73206574,0x1c(%esi)
 8049d05:	c7 46 20 6f 63 6b 65 	movl   $0x656b636f,0x20(%esi)
 8049d0c:	66 c7 46 24 74 00    	movw   $0x74,0x24(%esi)
 8049d12:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 8049d17:	e9 1f 01 00 00       	jmp    8049e3b <init_driver+0x1b9>
 8049d1c:	89 c3                	mov    %eax,%ebx
 8049d1e:	83 ec 0c             	sub    $0xc,%esp
 8049d21:	68 14 a4 04 08       	push   $0x804a414
 8049d26:	e8 45 eb ff ff       	call   8048870 <gethostbyname@plt>
 8049d2b:	83 c4 10             	add    $0x10,%esp
 8049d2e:	85 c0                	test   %eax,%eax
 8049d30:	75 6c                	jne    8049d9e <init_driver+0x11c>
 8049d32:	c7 06 45 72 72 6f    	movl   $0x6f727245,(%esi)
 8049d38:	c7 46 04 72 3a 20 44 	movl   $0x44203a72,0x4(%esi)
 8049d3f:	c7 46 08 4e 53 20 69 	movl   $0x6920534e,0x8(%esi)
 8049d46:	c7 46 0c 73 20 75 6e 	movl   $0x6e752073,0xc(%esi)
 8049d4d:	c7 46 10 61 62 6c 65 	movl   $0x656c6261,0x10(%esi)
 8049d54:	c7 46 14 20 74 6f 20 	movl   $0x206f7420,0x14(%esi)
 8049d5b:	c7 46 18 72 65 73 6f 	movl   $0x6f736572,0x18(%esi)
 8049d62:	c7 46 1c 6c 76 65 20 	movl   $0x2065766c,0x1c(%esi)
 8049d69:	c7 46 20 73 65 72 76 	movl   $0x76726573,0x20(%esi)
 8049d70:	c7 46 24 65 72 20 61 	movl   $0x61207265,0x24(%esi)
 8049d77:	c7 46 28 64 64 72 65 	movl   $0x65726464,0x28(%esi)
 8049d7e:	66 c7 46 2c 73 73    	movw   $0x7373,0x2c(%esi)
 8049d84:	c6 46 2e 00          	movb   $0x0,0x2e(%esi)
 8049d88:	83 ec 0c             	sub    $0xc,%esp
 8049d8b:	53                   	push   %ebx
 8049d8c:	e8 0f eb ff ff       	call   80488a0 <close@plt>
 8049d91:	83 c4 10             	add    $0x10,%esp
 8049d94:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 8049d99:	e9 9d 00 00 00       	jmp    8049e3b <init_driver+0x1b9>
 8049d9e:	8d 7c 24 0c          	lea    0xc(%esp),%edi
 8049da2:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
 8049da9:	00 
 8049daa:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
 8049db1:	00 
 8049db2:	c7 44 24 14 00 00 00 	movl   $0x0,0x14(%esp)
 8049db9:	00 
 8049dba:	c7 44 24 18 00 00 00 	movl   $0x0,0x18(%esp)
 8049dc1:	00 
 8049dc2:	66 c7 44 24 0c 02 00 	movw   $0x2,0xc(%esp)
 8049dc9:	6a 0c                	push   $0xc
 8049dcb:	ff 70 0c             	pushl  0xc(%eax)
 8049dce:	8b 40 10             	mov    0x10(%eax),%eax
 8049dd1:	ff 30                	pushl  (%eax)
 8049dd3:	8d 44 24 1c          	lea    0x1c(%esp),%eax
 8049dd7:	50                   	push   %eax
 8049dd8:	e8 f3 e9 ff ff       	call   80487d0 <__memmove_chk@plt>
 8049ddd:	66 c7 44 24 1e 3b 6e 	movw   $0x6e3b,0x1e(%esp)
 8049de4:	83 c4 0c             	add    $0xc,%esp
 8049de7:	6a 10                	push   $0x10
 8049de9:	57                   	push   %edi
 8049dea:	53                   	push   %ebx
 8049deb:	e8 a0 ea ff ff       	call   8048890 <connect@plt>
 8049df0:	83 c4 10             	add    $0x10,%esp
 8049df3:	85 c0                	test   %eax,%eax
 8049df5:	79 2a                	jns    8049e21 <init_driver+0x19f>
 8049df7:	83 ec 0c             	sub    $0xc,%esp
 8049dfa:	68 14 a4 04 08       	push   $0x804a414
 8049dff:	68 d4 a3 04 08       	push   $0x804a3d4
 8049e04:	6a ff                	push   $0xffffffff
 8049e06:	6a 01                	push   $0x1
 8049e08:	56                   	push   %esi
 8049e09:	e8 b2 ea ff ff       	call   80488c0 <__sprintf_chk@plt>
 8049e0e:	83 c4 14             	add    $0x14,%esp
 8049e11:	53                   	push   %ebx
 8049e12:	e8 89 ea ff ff       	call   80488a0 <close@plt>
 8049e17:	83 c4 10             	add    $0x10,%esp
 8049e1a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 8049e1f:	eb 1a                	jmp    8049e3b <init_driver+0x1b9>
 8049e21:	83 ec 0c             	sub    $0xc,%esp
 8049e24:	53                   	push   %ebx
 8049e25:	e8 76 ea ff ff       	call   80488a0 <close@plt>
 8049e2a:	66 c7 06 4f 4b       	movw   $0x4b4f,(%esi)
 8049e2f:	c6 46 02 00          	movb   $0x0,0x2(%esi)
 8049e33:	83 c4 10             	add    $0x10,%esp
 8049e36:	b8 00 00 00 00       	mov    $0x0,%eax
 8049e3b:	8b 54 24 1c          	mov    0x1c(%esp),%edx
 8049e3f:	65 33 15 14 00 00 00 	xor    %gs:0x14,%edx
 8049e46:	74 05                	je     8049e4d <init_driver+0x1cb>
 8049e48:	e8 43 e9 ff ff       	call   8048790 <__stack_chk_fail@plt>
 8049e4d:	83 c4 20             	add    $0x20,%esp
 8049e50:	5b                   	pop    %ebx
 8049e51:	5e                   	pop    %esi
 8049e52:	5f                   	pop    %edi
 8049e53:	c3                   	ret    

08049e54 <driver_post>:
 8049e54:	53                   	push   %ebx
 8049e55:	83 ec 08             	sub    $0x8,%esp
 8049e58:	8b 44 24 10          	mov    0x10(%esp),%eax
 8049e5c:	8b 5c 24 1c          	mov    0x1c(%esp),%ebx
 8049e60:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
 8049e65:	74 26                	je     8049e8d <driver_post+0x39>
 8049e67:	83 ec 04             	sub    $0x4,%esp
 8049e6a:	ff 74 24 18          	pushl  0x18(%esp)
 8049e6e:	68 22 a4 04 08       	push   $0x804a422
 8049e73:	6a 01                	push   $0x1
 8049e75:	e8 c6 e9 ff ff       	call   8048840 <__printf_chk@plt>
 8049e7a:	66 c7 03 4f 4b       	movw   $0x4b4f,(%ebx)
 8049e7f:	c6 43 02 00          	movb   $0x0,0x2(%ebx)
 8049e83:	83 c4 10             	add    $0x10,%esp
 8049e86:	b8 00 00 00 00       	mov    $0x0,%eax
 8049e8b:	eb 3e                	jmp    8049ecb <driver_post+0x77>
 8049e8d:	85 c0                	test   %eax,%eax
 8049e8f:	74 2c                	je     8049ebd <driver_post+0x69>
 8049e91:	80 38 00             	cmpb   $0x0,(%eax)
 8049e94:	74 27                	je     8049ebd <driver_post+0x69>
 8049e96:	83 ec 04             	sub    $0x4,%esp
 8049e99:	53                   	push   %ebx
 8049e9a:	ff 74 24 1c          	pushl  0x1c(%esp)
 8049e9e:	68 39 a4 04 08       	push   $0x804a439
 8049ea3:	50                   	push   %eax
 8049ea4:	68 41 a4 04 08       	push   $0x804a441
 8049ea9:	68 6e 3b 00 00       	push   $0x3b6e
 8049eae:	68 14 a4 04 08       	push   $0x804a414
 8049eb3:	e8 cb f5 ff ff       	call   8049483 <submitr>
 8049eb8:	83 c4 20             	add    $0x20,%esp
 8049ebb:	eb 0e                	jmp    8049ecb <driver_post+0x77>
 8049ebd:	66 c7 03 4f 4b       	movw   $0x4b4f,(%ebx)
 8049ec2:	c6 43 02 00          	movb   $0x0,0x2(%ebx)
 8049ec6:	b8 00 00 00 00       	mov    $0x0,%eax
 8049ecb:	83 c4 08             	add    $0x8,%esp
 8049ece:	5b                   	pop    %ebx
 8049ecf:	c3                   	ret    

08049ed0 <__libc_csu_init>:
 8049ed0:	55                   	push   %ebp
 8049ed1:	57                   	push   %edi
 8049ed2:	56                   	push   %esi
 8049ed3:	53                   	push   %ebx
 8049ed4:	e8 37 ea ff ff       	call   8048910 <__x86.get_pc_thunk.bx>
 8049ed9:	81 c3 27 21 00 00    	add    $0x2127,%ebx
 8049edf:	83 ec 0c             	sub    $0xc,%esp
 8049ee2:	8b 6c 24 20          	mov    0x20(%esp),%ebp
 8049ee6:	8d b3 0c ff ff ff    	lea    -0xf4(%ebx),%esi
 8049eec:	e8 03 e8 ff ff       	call   80486f4 <_init>
 8049ef1:	8d 83 08 ff ff ff    	lea    -0xf8(%ebx),%eax
 8049ef7:	29 c6                	sub    %eax,%esi
 8049ef9:	c1 fe 02             	sar    $0x2,%esi
 8049efc:	85 f6                	test   %esi,%esi
 8049efe:	74 25                	je     8049f25 <__libc_csu_init+0x55>
 8049f00:	31 ff                	xor    %edi,%edi
 8049f02:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 8049f08:	83 ec 04             	sub    $0x4,%esp
 8049f0b:	ff 74 24 2c          	pushl  0x2c(%esp)
 8049f0f:	ff 74 24 2c          	pushl  0x2c(%esp)
 8049f13:	55                   	push   %ebp
 8049f14:	ff 94 bb 08 ff ff ff 	call   *-0xf8(%ebx,%edi,4)
 8049f1b:	83 c7 01             	add    $0x1,%edi
 8049f1e:	83 c4 10             	add    $0x10,%esp
 8049f21:	39 f7                	cmp    %esi,%edi
 8049f23:	75 e3                	jne    8049f08 <__libc_csu_init+0x38>
 8049f25:	83 c4 0c             	add    $0xc,%esp
 8049f28:	5b                   	pop    %ebx
 8049f29:	5e                   	pop    %esi
 8049f2a:	5f                   	pop    %edi
 8049f2b:	5d                   	pop    %ebp
 8049f2c:	c3                   	ret    
 8049f2d:	8d 76 00             	lea    0x0(%esi),%esi

08049f30 <__libc_csu_fini>:
 8049f30:	f3 c3                	repz ret 

Disassembly of section .fini:

08049f34 <_fini>:
 8049f34:	53                   	push   %ebx
 8049f35:	83 ec 08             	sub    $0x8,%esp
 8049f38:	e8 d3 e9 ff ff       	call   8048910 <__x86.get_pc_thunk.bx>
 8049f3d:	81 c3 c3 20 00 00    	add    $0x20c3,%ebx
 8049f43:	83 c4 08             	add    $0x8,%esp
 8049f46:	5b                   	pop    %ebx
 8049f47:	c3                   	ret    